
[
    {
    "id": "java-1",
    "title": "Check Even or Odd",
    "short_description": "Return 'Even' if number is even, else 'Odd'.",
    "description": "Write a function that returns 'Even' for even integers and 'Odd' for odd integers.\n>>> checkEvenOdd(4)\n\"Even\"",
    "difficulty": "Easy",
    "tests": [
      {"input": "4", "output": "\"Even\""},
      {"input": "7", "output": "\"Odd\""},
      {"input": "0", "output": "\"Even\""},
      {"input": "-1", "output": "\"Odd\""},
      {"input": "100", "output": "\"Even\""},
      {"input": "101", "output": "\"Odd\""},
      {"input": "22", "output": "\"Even\""},
      {"input": "-22", "output": "\"Even\""},
      {"input": "-99", "output": "\"Odd\""},
      {"input": "1", "output": "\"Odd\""},
      {"input": "2", "output": "\"Even\""},
      {"input": "13", "output": "\"Odd\""}
    ]
  },
  {
    "id": "java-2",
    "title": "Calculate Factorial",
    "short_description": "Return factorial of a number.",
    "description": "Write a function to calculate factorial of a non-negative integer.\n>>> factorial(5)\n120",
    "difficulty": "Easy",
    "tests": [
      {"input": "5", "output": "120"},
      {"input": "0", "output": "1"},
      {"input": "1", "output": "1"},
      {"input": "3", "output": "6"},
      {"input": "7", "output": "5040"},
      {"input": "10", "output": "3628800"},
      {"input": "6", "output": "720"},
      {"input": "4", "output": "24"},
      {"input": "2", "output": "2"},
      {"input": "8", "output": "40320"},
      {"input": "9", "output": "362880"}
    ]
  },
  {
    "id": "java-3",
    "title": "Reverse String",
    "short_description": "Reverse the input string.",
    "description": "Return the reversed version of the given string.\n>>> reverseString(\"hello\")\n\"olleh\"",
    "difficulty": "Easy",
    "tests": [
      {"input": "\"hello\"", "output": "\"olleh\""},
      {"input": "\"java\"", "output": "\"avaj\""},
      {"input": "\"\"", "output": "\"\""},
      {"input": "\"a\"", "output": "\"a\""},
      {"input": "\"racecar\"", "output": "\"racecar\""},
      {"input": "\"12345\"", "output": "\"54321\""},
      {"input": "\"Test\"", "output": "\"tseT\""},
      {"input": "\"Palindrome\"", "output": "\"emordnilaP\""},
      {"input": "\"level\"", "output": "\"level\""},
      {"input": "\"   \"", "output": "\"   \""}
    ]
  },
  {
    "id": "java-4",
    "title": "Check Palindrome Number",
    "short_description": "Check if number is palindrome.",
    "description": "Determine if the given integer is a palindrome (reads the same backward and forward).\n>>> isPalindrome(121)\ntrue",
    "difficulty": "Easy",
    "tests": [
      {"input": "121", "output": "true"},
      {"input": "12321", "output": "true"},
      {"input": "10", "output": "false"},
      {"input": "1", "output": "true"},
      {"input": "123", "output": "false"},
      {"input": "0", "output": "true"},
      {"input": "999", "output": "true"},
      {"input": "1001", "output": "true"},
      {"input": "2002", "output": "true"},
      {"input": "23432", "output": "true"}
    ]
  },
  {
    "id": "java-5",
    "title": "Sum of Array Elements",
    "short_description": "Sum all integers in an array.",
    "description": "Return the sum of all elements in an integer array.\n>>> sumArray(new int[]{1,2,3})\n6",
    "difficulty": "Easy",
    "tests": [
      {"input": "new int[]{1,2,3}", "output": "6"},
      {"input": "new int[]{}", "output": "0"},
      {"input": "new int[]{10, -10, 20}", "output": "20"},
      {"input": "new int[]{5}", "output": "5"},
      {"input": "new int[]{0,0,0}", "output": "0"},
      {"input": "new int[]{-1,-2,-3}", "output": "-6"},
      {"input": "new int[]{100, 200, 300}", "output": "600"},
      {"input": "new int[]{7,8,9}", "output": "24"},
      {"input": "new int[]{1,1,1,1,1}", "output": "5"},
      {"input": "new int[]{50,50}", "output": "100"}
    ]
  },
  {
    "id": "java-6",
    "title": "Find Maximum",
    "short_description": "Return max value from array.",
    "description": "Given an integer array, return the maximum value.\n>>> maxValue(new int[]{1,5,3})\n5",
    "difficulty": "Easy",
    "tests": [
      {"input": "new int[]{1,5,3}", "output": "5"},
      {"input": "new int[]{-10, -5, -3}", "output": "-3"},
      {"input": "new int[]{0}", "output": "0"},
      {"input": "new int[]{100, 200, 50}", "output": "200"},
      {"input": "new int[]{1,1,1}", "output": "1"},
      {"input": "new int[]{7,8,9,10}", "output": "10"},
      {"input": "new int[]{-1,0,1}", "output": "1"},
      {"input": "new int[]{42}", "output": "42"},
      {"input": "new int[]{5,3,5}", "output": "5"},
      {"input": "new int[]{Integer.MIN_VALUE, 0}", "output": "0"}
    ]
  },
  {
    "id": "java-7",
    "title": "Check Prime",
    "short_description": "Check if a number is prime.",
    "description": "Return true if the given integer is prime, false otherwise.\n>>> isPrime(7)\ntrue",
    "difficulty": "Easy",
    "tests": [
      {"input": "7", "output": "true"},
      {"input": "4", "output": "false"},
      {"input": "1", "output": "false"},
      {"input": "2", "output": "true"},
      {"input": "13", "output": "true"},
      {"input": "0", "output": "false"},
      {"input": "-3", "output": "false"},
      {"input": "29", "output": "true"},
      {"input": "100", "output": "false"},
      {"input": "97", "output": "true"}
    ]
  },
  {
    "id": "java-8",
    "title": "Count Vowels",
    "short_description": "Count vowels in a string.",
    "description": "Return the number of vowels (a, e, i, o, u) in a string.\n>>> countVowels(\"hello\")\n2",
    "difficulty": "Easy",
    "tests": [
      {"input": "\"hello\"", "output": "2"},
      {"input": "\"JAVA\"", "output": "2"},
      {"input": "\"bcdfg\"", "output": "0"},
      {"input": "\"aeiouAEIOU\"", "output": "10"},
      {"input": "\"\"", "output": "0"},
      {"input": "\"rhythm\"", "output": "0"},
      {"input": "\"Education\"", "output": "5"},
      {"input": "\"queue\"", "output": "4"},
      {"input": "\"apple\"", "output": "2"},
      {"input": "\"banana\"", "output": "3"}
    ]
  },
  {
    "id": "java-9",
    "title": "Reverse Array",
    "short_description": "Reverse elements of an integer array.",
    "description": "Given an integer array, return a new array with elements in reverse order.\n>>> reverseArray(new int[]{1,2,3})\n[3,2,1]",
    "difficulty": "Easy",
    "tests": [
      {"input": "new int[]{1,2,3}", "output": "[3,2,1]"},
      {"input": "new int[]{10}", "output": "[10]"},
      {"input": "new int[]{}", "output": "[]"},
      {"input": "new int[]{4,5,6,7}", "output": "[7,6,5,4]"},
      {"input": "new int[]{-1,-2,-3}", "output": "[-3,-2,-1]"},
      {"input": "new int[]{1,1,1}", "output": "[1,1,1]"},
      {"input": "new int[]{0,0}", "output": "[0,0]"},
      {"input": "new int[]{5,4,3,2,1}", "output": "[1,2,3,4,5]"},
      {"input": "new int[]{100,200}", "output": "[200,100]"},
      {"input": "new int[]{1,2}", "output": "[2,1]"}
    ]
  },
  
  {
    "id": "java-10",
    "title": "Find Duplicate Elements",
    "short_description": "Return duplicates from an array.",
    "description": "Return a list of elements that appear more than once in the input array.\n>>> findDuplicates(new int[]{1,2,2,3,3,3})\n[2,3]",
    "difficulty": "Medium",
    "tests": [
      {"input": "new int[]{1,2,2,3,3,3}", "output": "[2,3]"},
      {"input": "new int[]{1,1,1,1}", "output": "[1]"},
      {"input": "new int[]{1,2,3}", "output": "[]"},
      {"input": "new int[]{}", "output": "[]"},
      {"input": "new int[]{5,5,6,7,7,8}", "output": "[5,7]"},
      {"input": "new int[]{10,20,10,30,20}", "output": "[10,20]"},
      {"input": "new int[]{0,0,0,0,0}", "output": "[0]"},
      {"input": "new int[]{100,101,102}", "output": "[]"},
      {"input": "new int[]{1,2,2,2,3,4}", "output": "[2]"},
      {"input": "new int[]{5,4,3,2,1}", "output": "[]"},
      {"input": "new int[]{3,3,3,3}", "output": "[3]"}
    ]
  },
  {
    "id": "java-11",
    "title": "Check Anagram",
    "short_description": "Determine if two strings are anagrams.",
    "description": "Return true if the two input strings are anagrams of each other.\n>>> isAnagram(\"listen\", \"silent\")\ntrue",
    "difficulty": "Medium",
    "tests": [
      {"input": "\"listen\", \"silent\"", "output": "true"},
      {"input": "\"hello\", \"world\"", "output": "false"},
      {"input": "\"evil\", \"vile\"", "output": "true"},
      {"input": "\"anagram\", \"nagaram\"", "output": "true"},
      {"input": "\"rat\", \"car\"", "output": "false"},
      {"input": "\"a\", \"a\"", "output": "true"},
      {"input": "\"\", \"\"", "output": "true"},
      {"input": "\"ab\", \"ba\"", "output": "true"},
      {"input": "\"abc\", \"cba\"", "output": "true"},
      {"input": "\"abcd\", \"dcba\"", "output": "true"}
    ]
  },
  {
    "id": "java-12",
    "title": "Fibonacci Sequence",
    "short_description": "Generate Fibonacci sequence up to n.",
    "description": "Return a list containing Fibonacci sequence numbers up to n (inclusive).\n>>> fibonacci(5)\n[0,1,1,2,3,5]",
    "difficulty": "Medium",
    "tests": [
      {"input": "5", "output": "[0,1,1,2,3,5]"},
      {"input": "0", "output": "[0]"},
      {"input": "1", "output": "[0,1,1]"},
      {"input": "10", "output": "[0,1,1,2,3,5,8]"},
      {"input": "15", "output": "[0,1,1,2,3,5,8,13]"},
      {"input": "2", "output": "[0,1,1,2]"},
      {"input": "3", "output": "[0,1,1,2,3]"},
      {"input": "20", "output": "[0,1,1,2,3,5,8,13]"}
    ]
  },
  {
    "id": "java-13",
    "title": "Remove Duplicates from Array",
    "short_description": "Remove duplicates from an integer array.",
    "description": "Return a new array with duplicates removed, preserving the original order.\n>>> removeDuplicates(new int[]{1,2,2,3})\n[1,2,3]",
    "difficulty": "Medium",
    "tests": [
      {"input": "new int[]{1,2,2,3}", "output": "[1,2,3]"},
      {"input": "new int[]{1,1,1,1}", "output": "[1]"},
      {"input": "new int[]{}", "output": "[]"},
      {"input": "new int[]{5,3,5,2,2}", "output": "[5,3,2]"},
      {"input": "new int[]{0,1,0,2}", "output": "[0,1,2]"},
      {"input": "new int[]{7,7,7,7}", "output": "[7]"},
      {"input": "new int[]{10,20,30}", "output": "[10,20,30]"},
      {"input": "new int[]{4,5,6,5,4}", "output": "[4,5,6]"},
      {"input": "new int[]{100}", "output": "[100]"},
      {"input": "new int[]{2,2,2,3,3,4}", "output": "[2,3,4]"}
    ]
  },
  {
    "id": "java-14",
    "title": "Count Words",
    "short_description": "Count the number of words in a string.",
    "description": "Return the count of words in a string separated by spaces.\n>>> countWords(\"Hello World\")\n2",
    "difficulty": "Medium",
    "tests": [
      {"input": "\"Hello World\"", "output": "2"},
      {"input": "\"\"", "output": "0"},
      {"input": "\"One\"", "output": "1"},
      {"input": "\"Count the number of words\"", "output": "6"},
      {"input": "\"Multiple   spaces\"", "output": "2"},
      {"input": "\"   Leading and trailing spaces   \"", "output": "4"},
      {"input": "\"A B C D\"", "output": "4"},
      {"input": "\"Word\"", "output": "1"},
      {"input": "\"Two words\"", "output": "2"},
      {"input": "\"New line\nseparated\"", "output": "2"}
    ]
  },
 
  {
    "id": "java-15",
    "title": "Merge Sorted Arrays",
    "short_description": "Merge two sorted integer arrays.",
    "description": "Given two sorted integer arrays, merge them into one sorted array.\n>>> mergeSorted(new int[]{1,3,5}, new int[]{2,4,6})\n[1,2,3,4,5,6]",
    "difficulty": "Hard",
    "tests": [
      {"input": "new int[]{1,3,5}, new int[]{2,4,6}", "output": "[1,2,3,4,5,6]"},
      {"input": "new int[]{}, new int[]{}", "output": "[]"},
      {"input": "new int[]{1,2,3}, new int[]{}", "output": "[1,2,3]"},
      {"input": "new int[]{}, new int[]{4,5,6}", "output": "[4,5,6]"},
      {"input": "new int[]{10,20,30}, new int[]{5,15,25}", "output": "[5,10,15,20,25,30]"},
      {"input": "new int[]{-1,0,1}, new int[]{-2,2,3}", "output": "[-2,-1,0,1,2,3]"},
      {"input": "new int[]{100,200}, new int[]{50,150}", "output": "[50,100,150,200]"},
      {"input": "new int[]{5,10}, new int[]{5,10}", "output": "[5,5,10,10]"},
      {"input": "new int[]{1,1,1}, new int[]{1,1}", "output": "[1,1,1,1,1]"},
      {"input": "new int[]{1,3,5,7}, new int[]{2,4,6,8}", "output": "[1,2,3,4,5,6,7,8]"},
      {"input": "new int[]{0}, new int[]{0}", "output": "[0,0]"},
      {"input": "new int[]{Integer.MIN_VALUE}, new int[]{Integer.MAX_VALUE}", "output": "[Integer.MIN_VALUE,Integer.MAX_VALUE]"}
    ]
  },
  {
    "id": "java-16",
    "title": "Longest Substring Without Repeating Characters",
    "short_description": "Find length of longest substring without repeating characters.",
    "description": "Return the length of the longest substring without repeating characters.\n>>> lengthOfLongestSubstring(\"abcabcbb\")\n3",
    "difficulty": "Hard",
    "tests": [
      {"input": "\"abcabcbb\"", "output": "3"},
      {"input": "\"bbbbb\"", "output": "1"},
      {"input": "\"pwwkew\"", "output": "3"},
      {"input": "\"\"", "output": "0"},
      {"input": "\"abcdefg\"", "output": "7"},
      {"input": "\"abba\"", "output": "2"},
      {"input": "\"dvdf\"", "output": "3"},
      {"input": "\"anviaj\"", "output": "5"},
      {"input": "\"tmmzuxt\"", "output": "5"},
      {"input": "\"aab\"", "output": "2"}
    ]
  },
  {
    "id": "java-17",
    "title": "Find All Anagrams in a String",
    "short_description": "Find all start indices of anagrams of a string.",
    "description": "Return all starting indices of p's anagrams in s.\n>>> findAnagrams(\"cbaebabacd\", \"abc\")\n[0,6]",
    "difficulty": "Hard",
    "tests": [
      {"input": "\"cbaebabacd\", \"abc\"", "output": "[0,6]"},
      {"input": "\"abab\", \"ab\"", "output": "[0,1,2]"},
      {"input": "\"acdcaeccde\", \"c\"", "output": "[2,3,6,7]"},
      {"input": "\"\", \"abc\"", "output": "[]"},
      {"input": "\"abc\", \"\"", "output": "[]"},
      {"input": "\"a\", \"a\"", "output": "[0]"},
      {"input": "\"aaaaaaaaaa\", \"aa\"", "output": "[0,1,2,3,4,5,6,7,8]"},
      {"input": "\"abacbabc\", \"abc\"", "output": "[1,2,3,4,5]"},
      {"input": "\"abcde\", \"edc\"", "output": "[2]"},
      {"input": "\"bca\", \"abc\"", "output": "[0,1,2]"}
    ]
  },
  {
    "id": "java-18",
    "title": "Median of Two Sorted Arrays",
    "short_description": "Find the median of two sorted arrays.",
    "description": "Find the median of the combined sorted arrays.\n>>> findMedianSortedArrays(new int[]{1,3}, new int[]{2})\n2.0",
    "difficulty": "Hard",
    "tests": [
      {"input": "new int[]{1,3}, new int[]{2}", "output": "2.0"},
      {"input": "new int[]{1,2}, new int[]{3,4}", "output": "2.5"},
      {"input": "new int[]{}, new int[]{1}", "output": "1.0"},
      {"input": "new int[]{2}, new int[]{}", "output": "2.0"},
      {"input": "new int[]{1,1}, new int[]{1,1}", "output": "1.0"},
      {"input": "new int[]{0,0}, new int[]{0,0}", "output": "0.0"},
      {"input": "new int[]{100,101}, new int[]{102,103}", "output": "101.5"},
      {"input": "new int[]{1,5,9}, new int[]{2,6,10}", "output": "5.5"},
      {"input": "new int[]{1}, new int[]{2,3,4,5}", "output": "3.0"},
      {"input": "new int[]{1,2,3}, new int[]{4,5,6,7,8}", "output": "4.5"}
    ]
  },
  {
    "id": "java-19",
    "title": "Regular Expression Matching",
    "short_description": "Implement regex matching with '.' and '*'.",
    "description": "Implement regex matching with support for '.' and '*'.\n>>> isMatch(\"aab\", \"c*a*b\")\ntrue",
    "difficulty": "Hard",
    "tests": [
      {"input": "\"aa\", \"a\"", "output": "false"},
      {"input": "\"aa\", \"aa\"", "output": "true"},
      {"input": "\"aaa\", \"aa\"", "output": "false"},
      {"input": "\"aa\", \"a*\"", "output": "true"},
      {"input": "\"aa\", \".*\"", "output": "true"},
      {"input": "\"ab\", \".*\"", "output": "true"},
      {"input": "\"aab\", \"c*a*b\"", "output": "true"},
      {"input": "\"mississippi\", \"mis*is*p*.\"", "output": "false"},
      {"input": "\"\", \"c*\"", "output": "true"},
      {"input": "\"abcd\", \"d*\"", "output": "false"}
    ]
  },
  {
    "id": "java-20",
    "title": "Word Ladder",
    "short_description": "Find shortest transformation sequence length.",
    "description": "Given two words and a dictionary, find the length of the shortest transformation sequence from start to end.\n>>> ladderLength(\"hit\", \"cog\", [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"])\n5",
    "difficulty": "Hard",
    "tests": [
      {"input": "\"hit\", \"cog\", new String[]{\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"}", "output": "5"},
      {"input": "\"hit\", \"cog\", new String[]{\"hot\",\"dot\",\"dog\",\"lot\",\"log\"}", "output": "0"},
      {"input": "\"a\", \"c\", new String[]{\"a\",\"b\",\"c\"}", "output": "2"},
      {"input": "\"hit\", \"hit\", new String[]{\"hit\"}", "output": "1"},
      {"input": "\"hot\", \"dog\", new String[]{\"hot\",\"dog\"}", "output": "2"},
      {"input": "\"hot\", \"dog\", new String[]{}", "output": "0"},
      {"input": "\"abc\", \"xyz\", new String[]{\"abc\",\"xbc\",\"xyc\",\"xyz\"}", "output": "4"},
      {"input": "\"a\", \"b\", new String[]{\"a\",\"b\"}", "output": "2"},
      {"input": "\"start\", \"end\", new String[]{\"stark\",\"stack\",\"slack\",\"black\",\"blank\",\"blink\",\"plink\",\"plink\",\"plink\",\"end\"}", "output": "0"},
      {"input": "\"cat\", \"dog\", new String[]{\"cot\",\"dot\",\"dog\"}", "output": "4"}
    ]
  }
]


