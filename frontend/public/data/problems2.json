[
  {
    "id": "problem-1",
    "title": "Problem 1",
    "short_description": "Check if in given list of numbers, are any two numbers closer to each other than threshold",
    "description": "Check if in given list of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements(1.0, 2.0, 3.0, 0.5)\nFalse\n>>> has_close_elements(1.0, 2.8, 3.0, 4.0, 5.0, 2.0, 0.3)\nTrue",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3",
        "output": "True"
      },
      {
        "input": "[1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05",
        "output": "False"
      },
      {
        "input": "[1.0, 2.0, 5.9, 4.0, 5.0], 0.95",
        "output": "True"
      },
      {
        "input": "[1.0, 2.0, 5.9, 4.0, 5.0], 0.8",
        "output": "False"
      },
      {
        "input": "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1",
        "output": "True"
      },
      {
        "input": "[1.1, 2.2, 3.1, 4.1, 5.1], 1.0",
        "output": "True"
      },
      {
        "input": "[1.1, 2.2, 3.1, 4.1, 5.1], 0.5",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-2",
    "title": "Problem 2",
    "short_description": "Input to this function is a string containing multiple groups of nested parentheses.",
    "description": "Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the list of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n'()', '(())', '(()())'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "'(()()) ((())) () ((())()())'",
        "output": "["
      },
      {
        "input": "'() (()) ((())) (((())))'",
        "output": "["
      },
      {
        "input": "'(()(())((())))'",
        "output": "["
      },
      {
        "input": "'( ) (( )) (( )( ))'",
        "output": "['()', '(())', '(()())']"
      }
    ]
  },
  {
    "id": "problem-3",
    "title": "Problem 3",
    "short_description": "Return the decimal part of the number.",
    "description": "Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "3.5",
        "output": "0.5"
      }
    ]
  },
  {
    "id": "problem-4",
    "title": "Problem 4",
    "short_description": "detect if at any point the balance of account fallls below zero from a list ",
    "description": "You're given a list of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return True. Otherwise it should return False.\n>>> below_zero(1, 2, 3)\nFalse\n>>> below_zero(1, 2, -4, 5)\nTrue",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[]",
        "output": "False"
      },
      {
        "input": "[1, 2, -3, 1, 2, -3]",
        "output": "False"
      },
      {
        "input": "[1, 2, -4, 5, 6]",
        "output": "True"
      },
      {
        "input": "[1, -1, 2, -2, 5, -5, 4, -4]",
        "output": "False"
      },
      {
        "input": "[1, -1, 2, -2, 5, -5, 4, -5]",
        "output": "True"
      },
      {
        "input": "[1, -2, 2, -2, 5, -5, 4, -4]",
        "output": "True"
      }
    ]
  },
  {
    "id": "problem-5",
    "title": "Problem 5",
    "short_description": "For a given list of input numbers, calculate Mean Absolute Deviation",
    "description": "For a given list of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation(1.0, 2.0, 3.0, 4.0)\n1.0",
    "difficulty": "Easy",
    "tests": []
  },
  {
    "id": "problem-6",
    "title": "Problem 6",
    "short_description": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'",
    "description": "Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n>>> intersperse(, 4)\n>>> intersperse(1, 2, 3, 4)\n1, 4, 2, 4, 3",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[], 7",
        "output": "[]"
      },
      {
        "input": "[5, 6, 3, 2], 8",
        "output": "[5, 8, 6, 8, 3, 8, 2]"
      },
      {
        "input": "[2, 2, 2], 2",
        "output": "[2, 2, 2, 2, 2]"
      }
    ]
  },
  {
    "id": "problem-7",
    "title": "Problem 7",
    "short_description": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.",
    "description": "Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens('(()()) ((())) () ((())()())')\n2, 3, 1, 3",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "'(()()) ((())) () ((())()())'",
        "output": "[2, 3, 1, 3]"
      },
      {
        "input": "'() (()) ((())) (((())))'",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "'(()(())((())))'",
        "output": "[4]"
      }
    ]
  },
  {
    "id": "problem-8",
    "title": "Problem 8",
    "short_description": "Filter an input list of strings only for ones that contain given substring",
    "description": "Filter an input list of strings only for ones that contain given substring\n>>> filter_by_substring(, 'a')\n>>> filter_by_substring('abc', 'bacd', 'cde', 'array', 'a')\n'abc', 'bacd', 'array'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[], 'john'",
        "output": "[]"
      },
      {
        "input": "['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'",
        "output": "['xxx', 'xxxAAA', 'xxx']"
      },
      {
        "input": "['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx'",
        "output": "['xxx', 'aaaxxy', 'xxxAAA', 'xxx']"
      },
      {
        "input": "['grunt', 'trumpet', 'prune', 'gruesome'], 'run'",
        "output": "['grunt', 'prune']"
      }
    ]
  },
  {
    "id": "problem-9",
    "title": "Problem 9",
    "short_description": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.",
    "description": "For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product()\n(0, 1)\n>>> sum_product(1, 2, 3, 4)\n(10, 24)",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[]",
        "output": "(0, 1)"
      },
      {
        "input": "[1, 1, 1]",
        "output": "(3, 1)"
      },
      {
        "input": "[100, 0]",
        "output": "(100, 0)"
      },
      {
        "input": "[3, 5, 7]",
        "output": "(3 + 5 + 7, 3 * 5 * 7)"
      },
      {
        "input": "[10]",
        "output": "(10, 10)"
      }
    ]
  },
  {
    "id": "problem-10",
    "title": "Problem 10",
    "short_description": "From a given list of integers, generate a list of rolling maximum element found until given moment",
    "description": "From a given list of integers, generate a list of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max(1, 2, 3, 2, 3, 4, 2)\n1, 2, 3, 3, 3, 4, 4",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[]",
        "output": "[]"
      },
      {
        "input": "[1, 2, 3, 4]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "[4, 3, 2, 1]",
        "output": "[4, 4, 4, 4]"
      },
      {
        "input": "[3, 2, 3, 100, 3]",
        "output": "[3, 3, 3, 100, 100]"
      }
    ]
  },
  {
    "id": "problem-11",
    "title": "Problem 11",
    "short_description": "Test if given string is a palindrome",
    "description": "Test if given string is a palindrome",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "''",
        "output": "''"
      },
      {
        "input": "'x'",
        "output": "'x'"
      },
      {
        "input": "'xyz'",
        "output": "'xyzyx'"
      },
      {
        "input": "'xyx'",
        "output": "'xyx'"
      },
      {
        "input": "'jerry'",
        "output": "'jerryrrej'"
      }
    ]
  },
  {
    "id": "problem-12",
    "title": "Problem 12",
    "short_description": "Input are two strings a and b consisting only of 1s and 0s.",
    "description": "Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor('010', '110')\n'100'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "'111000', '101010'",
        "output": "'010010'"
      },
      {
        "input": "'1', '1'",
        "output": "'0'"
      },
      {
        "input": "'0101', '0000'",
        "output": "'0101'"
      }
    ]
  },
  {
    "id": "problem-13",
    "title": "Problem 13",
    "short_description": "Out of list of strings, return the longest one. Return the first one in case of multiple",
    "description": "Out of list of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input list is empty.\n>>> longest()\n>>> longest('a', 'b', 'c')\n'a'\n>>> longest('a', 'bb', 'ccc')\n'ccc'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[]",
        "output": "None"
      },
      {
        "input": "['x', 'y', 'z']",
        "output": "'x'"
      },
      {
        "input": "['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']",
        "output": "'zzzz'"
      }
    ]
  },
  {
    "id": "problem-14",
    "title": "Problem 14",
    "short_description": "Return a greatest common divisor of two integers a and b",
    "description": "Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "3, 7",
        "output": "1"
      },
      {
        "input": "10, 15",
        "output": "5"
      },
      {
        "input": "49, 14",
        "output": "7"
      },
      {
        "input": "144, 60",
        "output": "12"
      }
    ]
  },
  {
    "id": "problem-15",
    "title": "Problem 15",
    "short_description": "Return list of all prefixes from shortest to longest of the input string",
    "description": "Return list of all prefixes from shortest to longest of the input string\n>>> all_prefixes('abc')\n'a', 'ab', 'abc'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "''",
        "output": "[]"
      },
      {
        "input": "'asdfgh'",
        "output": "['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']"
      },
      {
        "input": "'WWW'",
        "output": "['W', 'WW', 'WWW']"
      }
    ]
  },
  {
    "id": "problem-16",
    "title": "Problem 16",
    "short_description": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.",
    "description": "Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n'0'\n>>> string_sequence(5)\n'0 1 2 3 4 5'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "0",
        "output": "'0'"
      },
      {
        "input": "3",
        "output": "'0 1 2 3'"
      },
      {
        "input": "10",
        "output": "'0 1 2 3 4 5 6 7 8 9 10'"
      }
    ]
  },
  {
    "id": "problem-17",
    "title": "Problem 17",
    "short_description": "Given a string, find out how many distinct characters (regardless of case) does it consist of",
    "description": "Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters('xyzXYZ')\n3\n>>> count_distinct_characters('Jerry')\n4",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "''",
        "output": "0"
      },
      {
        "input": "'abcde'",
        "output": "5"
      },
      {
        "input": "'abcde' + 'cade' + 'CADE'",
        "output": "5"
      },
      {
        "input": "'aaaaAAAAaaaa'",
        "output": "1"
      },
      {
        "input": "'Jerry jERRY JeRRRY'",
        "output": "5"
      }
    ]
  },
  {
    "id": "problem-18",
    "title": "Problem 18",
    "short_description": "Input to this function is a string representing musical notes in a special ASCII format.",
    "description": "Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return list of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "''",
        "output": "[]"
      },
      {
        "input": "'o o o o'",
        "output": "[4, 4, 4, 4]"
      },
      {
        "input": "'.| .| .| .|'",
        "output": "[1, 1, 1, 1]"
      },
      {
        "input": "'o| o| .| .| o o o o'",
        "output": "[2, 2, 1, 1, 4, 4, 4, 4]"
      },
      {
        "input": "'o| .| o| .| o o| o o|'",
        "output": "[2, 1, 2, 1, 4, 2, 4, 2]"
      }
    ]
  },
  {
    "id": "problem-19",
    "title": "Problem 19",
    "short_description": "Find how many times a given substring can be found in the original string. Count overlaping cases.",
    "description": "Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times('', 'a')\n0\n>>> how_many_times('aaa', 'a')\n3\n>>> how_many_times('aaaa', 'aa')\n3",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "'', 'x'",
        "output": "0"
      },
      {
        "input": "'xyxyxyx', 'x'",
        "output": "4"
      },
      {
        "input": "'cacacacac', 'cac'",
        "output": "4"
      },
      {
        "input": "'john doe', 'john'",
        "output": "1"
      }
    ]
  },
  {
    "id": "problem-20",
    "title": "Problem 20",
    "short_description": "Input is a space-delimited string of numberals from 'zero' to 'nine'.",
    "description": "Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five')\n'one three five'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "''",
        "output": "''"
      },
      {
        "input": "'three'",
        "output": "'three'"
      },
      {
        "input": "'three five nine'",
        "output": "'three five nine'"
      },
      {
        "input": "'five zero four seven nine eight'",
        "output": "'zero four five seven eight nine'"
      },
      {
        "input": "'six five four three two one zero'",
        "output": "'zero one two three four five six'"
      }
    ]
  },
  {
    "id": "problem-21",
    "title": "Problem 21",
    "short_description": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each other ",
    "description": "From a supplied list of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements(1.0, 2.0, 3.0, 4.0, 5.0, 2.2)\n(2.0, 2.2)\n>>> find_closest_elements(1.0, 2.0, 3.0, 4.0, 5.0, 2.0)\n(2.0, 2.0)",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[1.0, 2.0, 3.9, 4.0, 5.0, 2.2]",
        "output": "(3.9, 4.0)"
      },
      {
        "input": "[1.0, 2.0, 5.9, 4.0, 5.0]",
        "output": "(5.0, 5.9)"
      },
      {
        "input": "[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]",
        "output": "(2.0, 2.2)"
      },
      {
        "input": "[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]",
        "output": "(2.0, 2.0)"
      },
      {
        "input": "[1.1, 2.2, 3.1, 4.1, 5.1]",
        "output": "(2.2, 3.1)"
      }
    ]
  },
  {
    "id": "problem-22",
    "title": "Problem 22",
    "short_description": "Given list of numbers (of at least two elements), apply a linear transform to that list,",
    "description": "Given list of numbers (of at least two elements), apply a linear transform to that list,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(1.0, 2.0, 3.0, 4.0, 5.0)\n0.0, 0.25, 0.5, 0.75, 1.0",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[2.0, 49.9]",
        "output": "[0.0, 1.0]"
      },
      {
        "input": "[100.0, 49.9]",
        "output": "[1.0, 0.0]"
      },
      {
        "input": "[1.0, 2.0, 3.0, 4.0, 5.0]",
        "output": "[0.0, 0.25, 0.5, 0.75, 1.0]"
      },
      {
        "input": "[2.0, 1.0, 5.0, 3.0, 4.0]",
        "output": "[0.25, 0.0, 1.0, 0.5, 0.75]"
      },
      {
        "input": "[12.0, 11.0, 15.0, 13.0, 14.0]",
        "output": "[0.25, 0.0, 1.0, 0.5, 0.75]"
      }
    ]
  },
  {
    "id": "problem-23",
    "title": "Problem 23",
    "short_description": "Filter given list of any python values only for integers",
    "description": "Filter given list of any python values only for integers\n>>> filter_integers('a', 3.14, 5)\n5\n>>> filter_integers(1, 2, 3, 'abc', {}, )\n1, 2, 3",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[]",
        "output": "[]"
      },
      {
        "input": "[4, {}, [], 23.2, 9, 'adasd']",
        "output": "[4, 9]"
      },
      {
        "input": "[3, 'c', 3, 3, 'a', 'b']",
        "output": "[3, 3, 3]"
      }
    ]
  },
  {
    "id": "problem-24",
    "title": "Problem 24",
    "short_description": "Return length of given string",
    "description": "Return length of given string\n>>> strlen('')\n0\n>>> strlen('abc')\n3",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "''",
        "output": "0"
      },
      {
        "input": "'x'",
        "output": "1"
      },
      {
        "input": "'asdasnakj'",
        "output": "9"
      }
    ]
  },
  {
    "id": "problem-25",
    "title": "Problem 25",
    "short_description": "For a given number n, find the largest number that divides n evenly, smaller than n",
    "description": "For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "3",
        "output": "1"
      },
      {
        "input": "7",
        "output": "1"
      },
      {
        "input": "10",
        "output": "5"
      },
      {
        "input": "100",
        "output": "50"
      },
      {
        "input": "49",
        "output": "7"
      }
    ]
  },
  {
    "id": "problem-26",
    "title": "Problem 26",
    "short_description": "Return list of prime factors of given integer in the order from smallest to largest.",
    "description": "Return list of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n2, 2, 2\n>>> factorize(25)\n5, 5\n>>> factorize(70)\n2, 5, 7",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "2",
        "output": "[2]"
      },
      {
        "input": "4",
        "output": "[2, 2]"
      },
      {
        "input": "8",
        "output": "[2, 2, 2]"
      },
      {
        "input": "3 * 19",
        "output": "[3, 19]"
      },
      {
        "input": "3 * 19 * 3 * 19",
        "output": "[3, 3, 19, 19]"
      },
      {
        "input": "3 * 19 * 3 * 19 * 3 * 19",
        "output": "[3, 3, 3, 19, 19, 19]"
      },
      {
        "input": "3 * 19 * 19 * 19",
        "output": "[3, 19, 19, 19]"
      },
      {
        "input": "3 * 2 * 3",
        "output": "[2, 3, 3]"
      }
    ]
  },
  {
    "id": "problem-27",
    "title": "Problem 27",
    "short_description": "From a list of integers, remove all elements that occur more than once.",
    "description": "From a list of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates(1, 2, 3, 2, 4)\n1, 3, 4",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[]",
        "output": "[]"
      },
      {
        "input": "[1, 2, 3, 4]",
        "output": "[1, 2, 3, 4]"
      },
      {
        "input": "[1, 2, 3, 2, 4, 3, 5]",
        "output": "[1, 4, 5]"
      }
    ]
  },
  {
    "id": "problem-28",
    "title": "Problem 28",
    "short_description": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.",
    "description": "For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case('Hello')\n'hELLO'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "''",
        "output": "''"
      },
      {
        "input": "'Hello!'",
        "output": "'hELLO!'"
      },
      {
        "input": "'These violent delights have violent ends'",
        "output": "'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'"
      }
    ]
  },
  {
    "id": "problem-29",
    "title": "Problem 29",
    "short_description": "Concatenate list of strings into a single string",
    "description": "Concatenate list of strings into a single string\n>>> concatenate()\n''\n>>> concatenate('a', 'b', 'c')\n'abc'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[]",
        "output": "''"
      },
      {
        "input": "['x', 'y', 'z']",
        "output": "'xyz'"
      },
      {
        "input": "['x', 'y', 'z', 'w', 'k']",
        "output": "'xyzwk'"
      }
    ]
  },
  {
    "id": "problem-30",
    "title": "Problem 30",
    "short_description": "Filter an input list of strings only for ones that start with a given prefix.",
    "description": "Filter an input list of strings only for ones that start with a given prefix.\n>>> filter_by_prefix(, 'a')\n>>> filter_by_prefix('abc', 'bcd', 'cde', 'array', 'a')\n'abc', 'array'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[], 'john'",
        "output": "[]"
      },
      {
        "input": "['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx'",
        "output": "['xxx', 'xxxAAA', 'xxx']"
      }
    ]
  },
  {
    "id": "problem-31",
    "title": "Problem 31",
    "short_description": "Return only positive numbers in the list.",
    "description": "Return only positive numbers in the list.\n>>> get_positive(-1, 2, -4, 5, 6)\n2, 5, 6\n>>> get_positive(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)\n5, 3, 2, 3, 9, 123, 1",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[-1, -2, 4, 5, 6]",
        "output": "[4, 5, 6]"
      },
      {
        "input": "[5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]",
        "output": "[5, 3, 2, 3, 3, 9, 123, 1]"
      },
      {
        "input": "[-1, -2]",
        "output": "[]"
      },
      {
        "input": "[]",
        "output": "[]"
      }
    ]
  },
  {
    "id": "problem-32",
    "title": "Problem 32",
    "short_description": "Return true if a given number is prime, and false otherwise.",
    "description": "Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nFalse\n>>> is_prime(101)\nTrue\n>>> is_prime(11)\nTrue\n>>> is_prime(13441)\nTrue\n>>> is_prime(61)\nTrue\n>>> is_prime(4)\nFalse\n>>> is_prime(1)\nFalse",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "6",
        "output": "False"
      },
      {
        "input": "101",
        "output": "True"
      },
      {
        "input": "11",
        "output": "True"
      },
      {
        "input": "13441",
        "output": "True"
      },
      {
        "input": "61",
        "output": "True"
      },
      {
        "input": "4",
        "output": "False"
      },
      {
        "input": "1",
        "output": "False"
      },
      {
        "input": "5",
        "output": "True"
      },
      {
        "input": "11",
        "output": "True"
      },
      {
        "input": "17",
        "output": "True"
      },
      {
        "input": "5 * 17",
        "output": "False"
      },
      {
        "input": "11 * 7",
        "output": "False"
      },
      {
        "input": "13441 * 19",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-33",
    "title": "Problem 33",
    "short_description": "Evaluates polynomial with coefficients xs at point x.",
    "description": "Evaluates polynomial with coefficients xs at point x.\nreturn xs0 + xs1 * x + xs1 * x^2 + .... xsn * x^n",
    "difficulty": "Easy",
    "tests": []
  },
  {
    "id": "problem-34",
    "title": "Problem 34",
    "short_description": "This function takes a list l and returns a list l' such that",
    "description": "This function takes a list l and returns a list l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third(1, 2, 3)\n1, 2, 3\n>>> sort_third(5, 6, 3, 4, 8, 9, 2)\n2, 6, 3, 4, 8, 9, 5",
    "difficulty": "Easy",
    "tests": []
  },
  {
    "id": "problem-35",
    "title": "Problem 35",
    "short_description": "Return sorted unique elements in a list",
    "description": "Return sorted unique elements in a list\n>>> unique(5, 3, 5, 2, 3, 3, 9, 0, 123)\n0, 2, 3, 5, 9, 123",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[5, 3, 5, 2, 3, 3, 9, 0, 123]",
        "output": "[0, 2, 3, 5, 9, 123]"
      }
    ]
  },
  {
    "id": "problem-36",
    "title": "Problem 36",
    "short_description": "Return maximum element in the list.",
    "description": "Return maximum element in the list.\n>>> max_element(1, 2, 3)\n3\n>>> max_element(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)\n123",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[1, 2, 3]",
        "output": "3"
      },
      {
        "input": "[5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]",
        "output": "124"
      }
    ]
  },
  {
    "id": "problem-37",
    "title": "Problem 37",
    "short_description": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.",
    "description": "Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "50",
        "output": "0"
      },
      {
        "input": "78",
        "output": "2"
      },
      {
        "input": "79",
        "output": "3"
      },
      {
        "input": "100",
        "output": "3"
      },
      {
        "input": "200",
        "output": "6"
      },
      {
        "input": "4000",
        "output": "192"
      },
      {
        "input": "10000",
        "output": "639"
      },
      {
        "input": "100000",
        "output": "8026"
      }
    ]
  },
  {
    "id": "problem-38",
    "title": "Problem 38",
    "short_description": "This function takes a list l and returns a list l' such that",
    "description": "This function takes a list l and returns a list l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even(1, 2, 3)\n1, 2, 3\n>>> sort_even(5, 6, 3, 4)\n3, 6, 5, 4",
    "difficulty": "Easy",
    "tests": []
  },
  {
    "id": "problem-39",
    "title": "Problem 39",
    "short_description": "returns encoded string by cycling groups of three characters.",
    "description": "returns encoded string by cycling groups of three characters.",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "encoded_str",
        "output": "str"
      }
    ]
  },
  {
    "id": "problem-40",
    "title": "Problem 40",
    "short_description": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.",
    "description": "prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "1",
        "output": "2"
      },
      {
        "input": "2",
        "output": "3"
      },
      {
        "input": "3",
        "output": "5"
      },
      {
        "input": "4",
        "output": "13"
      },
      {
        "input": "5",
        "output": "89"
      },
      {
        "input": "6",
        "output": "233"
      },
      {
        "input": "7",
        "output": "1597"
      },
      {
        "input": "8",
        "output": "28657"
      },
      {
        "input": "9",
        "output": "514229"
      },
      {
        "input": "10",
        "output": "433494437"
      }
    ]
  },
  {
    "id": "problem-41",
    "title": "Problem 41",
    "short_description": "triples_sum_to_zero takes a list of integers as an input.",
    "description": "triples_sum_to_zero takes a list of integers as an input.\nit returns True if there are three distinct elements in the list that\nsum to zero, and False otherwise.\n>>> triples_sum_to_zero(1, 3, 5, 0)\nFalse\n>>> triples_sum_to_zero(1, 3, -2, 1)\nTrue\n>>> triples_sum_to_zero(1, 2, 3, 7)\nFalse\n>>> triples_sum_to_zero(2, 4, -5, 3, 9, 7)\nTrue\n>>> triples_sum_to_zero(1)\nFalse",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[1, 3, 5, 0]",
        "output": "False"
      },
      {
        "input": "[1, 3, 5, -1]",
        "output": "False"
      },
      {
        "input": "[1, 3, -2, 1]",
        "output": "True"
      },
      {
        "input": "[1, 2, 3, 7]",
        "output": "False"
      },
      {
        "input": "[1, 2, 5, 7]",
        "output": "False"
      },
      {
        "input": "[2, 4, -5, 3, 9, 7]",
        "output": "True"
      },
      {
        "input": "[1]",
        "output": "False"
      },
      {
        "input": "[1, 3, 5, -100]",
        "output": "False"
      },
      {
        "input": "[100, 3, 5, -100]",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-42",
    "title": "Problem 42",
    "short_description": "Imagine a road that's a perfectly straight infinitely long line.",
    "description": "Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "2",
        "output": "4"
      },
      {
        "input": "3",
        "output": "9"
      },
      {
        "input": "4",
        "output": "16"
      },
      {
        "input": "8",
        "output": "64"
      },
      {
        "input": "10",
        "output": "100"
      }
    ]
  },
  {
    "id": "problem-43",
    "title": "Problem 43",
    "short_description": "Return list with elements incremented by 1.",
    "description": "Return list with elements incremented by 1.\n>>> incr_list(1, 2, 3)\n2, 3, 4\n>>> incr_list(5, 3, 5, 2, 3, 3, 9, 0, 123)\n6, 4, 6, 3, 4, 4, 10, 1, 124",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[]",
        "output": "[]"
      },
      {
        "input": "[3, 2, 1]",
        "output": "[4, 3, 2]"
      },
      {
        "input": "[5, 2, 5, 2, 3, 3, 9, 0, 123]",
        "output": "[6, 3, 6, 3, 4, 4, 10, 1, 124]"
      }
    ]
  },
  {
    "id": "problem-44",
    "title": "Problem 44",
    "short_description": "pairs_sum_to_zero takes a list of integers as an input.",
    "description": "pairs_sum_to_zero takes a list of integers as an input.\nit returns True if there are two distinct elements in the list that\nsum to zero, and False otherwise.\n>>> pairs_sum_to_zero(1, 3, 5, 0)\nFalse\n>>> pairs_sum_to_zero(1, 3, -2, 1)\nFalse\n>>> pairs_sum_to_zero(1, 2, 3, 7)\nFalse\n>>> pairs_sum_to_zero(2, 4, -5, 3, 5, 7)\nTrue\n>>> pairs_sum_to_zero(1)\nFalse",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[1, 3, 5, 0]",
        "output": "False"
      },
      {
        "input": "[1, 3, -2, 1]",
        "output": "False"
      },
      {
        "input": "[1, 2, 3, 7]",
        "output": "False"
      },
      {
        "input": "[2, 4, -5, 3, 5, 7]",
        "output": "True"
      },
      {
        "input": "[1]",
        "output": "False"
      },
      {
        "input": "[-3, 9, -1, 3, 2, 30]",
        "output": "True"
      },
      {
        "input": "[-3, 9, -1, 3, 2, 31]",
        "output": "True"
      },
      {
        "input": "[-3, 9, -1, 4, 2, 30]",
        "output": "False"
      },
      {
        "input": "[-3, 9, -1, 4, 2, 31]",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-45",
    "title": "Problem 45",
    "short_description": "Change numerical base of input number x to base.",
    "description": "Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n'22'\n>>> change_base(8, 2)\n'1000'\n>>> change_base(7, 2)\n'111'",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "8, 3",
        "output": "\"22\""
      },
      {
        "input": "9, 3",
        "output": "\"100\""
      },
      {
        "input": "234, 2",
        "output": "\"11101010\""
      },
      {
        "input": "16, 2",
        "output": "\"10000\""
      },
      {
        "input": "8, 2",
        "output": "\"1000\""
      },
      {
        "input": "7, 2",
        "output": "\"111\""
      },
      {
        "input": "x, x + 1",
        "output": "str(x)"
      }
    ]
  },
  {
    "id": "problem-46",
    "title": "Problem 46",
    "short_description": "Given length of a side and high return area for a triangle.",
    "description": "Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "5, 3",
        "output": "7.5"
      },
      {
        "input": "2, 2",
        "output": "2.0"
      },
      {
        "input": "10, 8",
        "output": "40.0"
      }
    ]
  },
  {
    "id": "problem-47",
    "title": "Problem 47",
    "short_description": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:",
    "description": "The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "5",
        "output": "4"
      },
      {
        "input": "8",
        "output": "28"
      },
      {
        "input": "10",
        "output": "104"
      },
      {
        "input": "12",
        "output": "386"
      }
    ]
  },
  {
    "id": "problem-48",
    "title": "Problem 48",
    "short_description": "Return median of elements in the list l.",
    "description": "Return median of elements in the list l.\n>>> median(3, 1, 2, 4, 5)\n3\n>>> median(-10, 4, 6, 1000, 10, 20)\n15.0",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "[3, 1, 2, 4, 5]",
        "output": "3"
      },
      {
        "input": "[-10, 4, 6, 1000, 10, 20]",
        "output": "8.0"
      },
      {
        "input": "[5]",
        "output": "5"
      },
      {
        "input": "[6, 5]",
        "output": "5.5"
      },
      {
        "input": "[8, 1, 3, 9, 9, 2, 7]",
        "output": "7"
      }
    ]
  },
  {
    "id": "problem-49",
    "title": "Problem 49",
    "short_description": "Checks if given string is a palindrome",
    "description": "Checks if given string is a palindrome\n>>> is_palindrome('')\nTrue\n>>> is_palindrome('aba')\nTrue\n>>> is_palindrome('aaaaa')\nTrue\n>>> is_palindrome('zbcd')\nFalse",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "''",
        "output": "True"
      },
      {
        "input": "'aba'",
        "output": "True"
      },
      {
        "input": "'aaaaa'",
        "output": "True"
      },
      {
        "input": "'zbcd'",
        "output": "False"
      },
      {
        "input": "'xywyx'",
        "output": "True"
      },
      {
        "input": "'xywyz'",
        "output": "False"
      },
      {
        "input": "'xywzx'",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-50",
    "title": "Problem 50",
    "short_description": "Return 2^n modulo p (be aware of numerics).",
    "description": "Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1",
    "difficulty": "Easy",
    "tests": [
      {
        "input": "3, 5",
        "output": "3"
      },
      {
        "input": "1101, 101",
        "output": "2"
      },
      {
        "input": "0, 101",
        "output": "1"
      },
      {
        "input": "3, 11",
        "output": "8"
      },
      {
        "input": "100, 101",
        "output": "1"
      },
      {
        "input": "30, 5",
        "output": "4"
      },
      {
        "input": "31, 5",
        "output": "3"
      }
    ]
  },
  {
    "id": "problem-51",
    "title": "Problem 51",
    "short_description": "returns encoded string by shifting every character by 5 in the alphabet.",
    "description": "returns encoded string by shifting every character by 5 in the alphabet.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "copy.deepcopy(encoded_str)",
        "output": "str"
      }
    ]
  },
  {
    "id": "problem-52",
    "title": "Problem 52",
    "short_description": "remove_vowels is a function that takes string and returns string without vowels.",
    "description": "remove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels('')\n''\n>>> remove_vowels(\"abcdef\nghijklm\")\n'bcdf\nghjklm'\n>>> remove_vowels('abcdef')\n'bcdf'\n>>> remove_vowels('aaaaa')\n''\n>>> remove_vowels('aaBAA')\n'B'\n>>> remove_vowels('zbcd')\n'zbcd'",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "''",
        "output": "''"
      },
      {
        "input": "\"abcdef\\nghijklm\"",
        "output": "'bcdf\\nghjklm'"
      },
      {
        "input": "'fedcba'",
        "output": "'fdcb'"
      },
      {
        "input": "'eeeee'",
        "output": "''"
      },
      {
        "input": "'acBAA'",
        "output": "'cB'"
      },
      {
        "input": "'EcBOO'",
        "output": "'cB'"
      },
      {
        "input": "'ybcd'",
        "output": "'ybcd'"
      }
    ]
  },
  {
    "id": "problem-53",
    "title": "Problem 53",
    "short_description": "Return True if all numbers in the list l are below threshold t.",
    "description": "Return True if all numbers in the list l are below threshold t.\n>>> below_threshold(1, 2, 4, 10, 100)\nTrue\n>>> below_threshold(1, 20, 4, 10, 5)\nFalse",
    "difficulty": "Medium",
    "tests": []
  },
  {
    "id": "problem-54",
    "title": "Problem 54",
    "short_description": "Add two numbers x and y",
    "description": "Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "0, 1",
        "output": "1"
      },
      {
        "input": "1, 0",
        "output": "1"
      },
      {
        "input": "2, 3",
        "output": "5"
      },
      {
        "input": "5, 7",
        "output": "12"
      },
      {
        "input": "7, 5",
        "output": "12"
      },
      {
        "input": "x, y",
        "output": "x + y"
      }
    ]
  },
  {
    "id": "problem-55",
    "title": "Problem 55",
    "short_description": "Check if two words have the same characters.",
    "description": "Check if two words have the same characters.\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\nTrue\n>>> same_chars('abcd', 'dddddddabc')\nTrue\n>>> same_chars('dddddddabc', 'abcd')\nTrue\n>>> same_chars('eabcd', 'dddddddabc')\nFalse\n>>> same_chars('abcd', 'dddddddabce')\nFalse\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\nFalse",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "'eabcdzzzz', 'dddzzzzzzzddeddabc'",
        "output": "True"
      },
      {
        "input": "'abcd', 'dddddddabc'",
        "output": "True"
      },
      {
        "input": "'dddddddabc', 'abcd'",
        "output": "True"
      },
      {
        "input": "'eabcd', 'dddddddabc'",
        "output": "False"
      },
      {
        "input": "'abcd', 'dddddddabcf'",
        "output": "False"
      },
      {
        "input": "'eabcdzzzz', 'dddzzzzzzzddddabc'",
        "output": "False"
      },
      {
        "input": "'aabb', 'aaccc'",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-56",
    "title": "Problem 56",
    "short_description": "Return n-th Fibonacci number.",
    "description": "Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "10",
        "output": "55"
      },
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "8",
        "output": "21"
      },
      {
        "input": "11",
        "output": "89"
      },
      {
        "input": "12",
        "output": "144"
      }
    ]
  },
  {
    "id": "problem-57",
    "title": "Problem 57",
    "short_description": "brackets is a string of \"<\" and \">\".",
    "description": "brackets is a string of \"<\" and \">\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nFalse\n>>> correct_bracketing(\"<>\")\nTrue\n>>> correct_bracketing(\"<<><>>\")\nTrue\n>>> correct_bracketing(\"><<>\")\nFalse",
    "difficulty": "Medium",
    "tests": []
  },
  {
    "id": "problem-58",
    "title": "Problem 58",
    "short_description": "Return True is list elements are monotonically increasing or decreasing.",
    "description": "Return True is list elements are monotonically increasing or decreasing.\n>>> monotonic(1, 2, 4, 20)\nTrue\n>>> monotonic(1, 20, 4, 10)\nFalse\n>>> monotonic(4, 1, 0, -10)\nTrue",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[1, 2, 4, 10]",
        "output": "True"
      },
      {
        "input": "[1, 2, 4, 20]",
        "output": "True"
      },
      {
        "input": "[1, 20, 4, 10]",
        "output": "False"
      },
      {
        "input": "[4, 1, 0, -10]",
        "output": "True"
      },
      {
        "input": "[4, 1, 1, 0]",
        "output": "True"
      },
      {
        "input": "[1, 2, 3, 2, 5, 60]",
        "output": "False"
      },
      {
        "input": "[1, 2, 3, 4, 5, 60]",
        "output": "True"
      },
      {
        "input": "[9, 9, 9, 9]",
        "output": "True"
      }
    ]
  },
  {
    "id": "problem-59",
    "title": "Problem 59",
    "short_description": "Return sorted unique common elements for two lists.",
    "description": "Return sorted unique common elements for two lists.\n>>> common(1, 4, 3, 34, 653, 2, 5, 5, 7, 1, 5, 9, 653, 121)\n1, 5, 653\n>>> common(5, 3, 2, 8, 3, 2)\n2, 3",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]",
        "output": "[1, 5, 653]"
      },
      {
        "input": "[5, 3, 2, 8], [3, 2]",
        "output": "[2, 3]"
      },
      {
        "input": "[4, 3, 2, 8], [3, 2, 4]",
        "output": "[2, 3, 4]"
      },
      {
        "input": "[4, 3, 2, 8], []",
        "output": "[]"
      }
    ]
  },
  {
    "id": "problem-60",
    "title": "Problem 60",
    "short_description": "Return the largest prime factor of n. Assume n > 1 and is not a prime.",
    "description": "Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "15",
        "output": "5"
      },
      {
        "input": "27",
        "output": "3"
      },
      {
        "input": "63",
        "output": "7"
      },
      {
        "input": "330",
        "output": "11"
      },
      {
        "input": "13195",
        "output": "29"
      }
    ]
  },
  {
    "id": "problem-61",
    "title": "Problem 61",
    "short_description": "sum_to_n is a function that sums numbers from 1 to n.",
    "description": "sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "6",
        "output": "21"
      },
      {
        "input": "11",
        "output": "66"
      },
      {
        "input": "30",
        "output": "465"
      },
      {
        "input": "100",
        "output": "5050"
      }
    ]
  },
  {
    "id": "problem-62",
    "title": "Problem 62",
    "short_description": "brackets is a string of \"(\" and \")\".",
    "description": "brackets is a string of \"(\" and \")\".\nreturn True if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\nFalse\n>>> correct_bracketing(\"()\")\nTrue\n>>> correct_bracketing(\"(()())\")\nTrue\n>>> correct_bracketing(\")(()\")\nFalse",
    "difficulty": "Medium",
    "tests": []
  },
  {
    "id": "problem-63",
    "title": "Problem 63",
    "short_description": "xs represent coefficients of a polynomial.",
    "description": "xs represent coefficients of a polynomial.\nxs0 + xs1 * x + xs2 * x^2 + ....\nReturn derivative of this polynomial in the same form.\n>>> derivative(3, 1, 2, 4, 5)\n1, 4, 12, 20\n>>> derivative(1, 2, 3)\n2, 6",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[3, 1, 2, 4, 5]",
        "output": "[1, 4, 12, 20]"
      },
      {
        "input": "[1, 2, 3]",
        "output": "[2, 6]"
      },
      {
        "input": "[3, 2, 1]",
        "output": "[2, 2]"
      },
      {
        "input": "[3, 2, 1, 0, 4]",
        "output": "[2, 2, 0, 16]"
      },
      {
        "input": "[1]",
        "output": "[]"
      }
    ]
  },
  {
    "id": "problem-64",
    "title": "Problem 64",
    "short_description": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:",
    "description": "The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "2",
        "output": "1"
      },
      {
        "input": "1",
        "output": "0"
      },
      {
        "input": "5",
        "output": "4"
      },
      {
        "input": "8",
        "output": "24"
      },
      {
        "input": "10",
        "output": "81"
      },
      {
        "input": "12",
        "output": "274"
      },
      {
        "input": "14",
        "output": "927"
      }
    ]
  },
  {
    "id": "problem-65",
    "title": "Problem 65",
    "short_description": "Add more test cases.",
    "description": "Add more test cases.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "\"abcde\"",
        "output": "2, \"Test 1\""
      },
      {
        "input": "\"Alone\"",
        "output": "3, \"Test 2\""
      },
      {
        "input": "\"key\"",
        "output": "2, \"Test 3\""
      },
      {
        "input": "\"bye\"",
        "output": "1, \"Test 4\""
      },
      {
        "input": "\"keY\"",
        "output": "2, \"Test 5\""
      },
      {
        "input": "\"bYe\"",
        "output": "1, \"Test 6\""
      },
      {
        "input": "\"ACEDY\"",
        "output": "3, \"Test 7\""
      }
    ]
  },
  {
    "id": "problem-66",
    "title": "Problem 66",
    "short_description": "Circular shift the digits of the integer x, shift the digits right by shift",
    "description": "Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "100, 2",
        "output": "\"001\""
      },
      {
        "input": "12, 2",
        "output": "\"12\""
      },
      {
        "input": "97, 8",
        "output": "\"79\""
      },
      {
        "input": "12, 1",
        "output": "\"21\", \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "11, 101",
        "output": "\"11\", \"This prints if this assert fails 2 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-67",
    "title": "Problem 67",
    "short_description": "Task",
    "description": "Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\ndigitSum(\"\") => 0\ndigitSum(\"abAB\") => 131\ndigitSum(\"abcCd\") => 67\ndigitSum(\"helloE\") => 69\ndigitSum(\"woArBld\") => 131\ndigitSum(\"aAaaaXa\") => 153",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "\"\"",
        "output": "0, \"Error\""
      },
      {
        "input": "\"abAB\"",
        "output": "131, \"Error\""
      },
      {
        "input": "\"abcCd\"",
        "output": "67, \"Error\""
      },
      {
        "input": "\"helloE\"",
        "output": "69, \"Error\""
      },
      {
        "input": "\"woArBld\"",
        "output": "131, \"Error\""
      },
      {
        "input": "\"aAaaaXa\"",
        "output": "153, \"Error\""
      },
      {
        "input": "\" How are yOu?\"",
        "output": "151, \"Error\""
      },
      {
        "input": "\"You arE Very Smart\"",
        "output": "327, \"Error\""
      }
    ]
  },
  {
    "id": "problem-68",
    "title": "Problem 68",
    "short_description": "In this task, you will be given a string that represents a number of apples and oranges",
    "description": "In this task, you will be given a string that represents a number of apples and oranges\nthat are distributed in a basket of fruit this basket contains\napples, oranges, and mango fruits. Given the string that represents the total number of\nthe oranges and apples and an integer that represent the total number of the fruits\nin the basket return the number of the mango fruits in the basket.\nfor examble:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "\"5 apples and 6 oranges\",19",
        "output": "8"
      },
      {
        "input": "\"5 apples and 6 oranges\",21",
        "output": "10"
      },
      {
        "input": "\"0 apples and 1 oranges\",3",
        "output": "2"
      },
      {
        "input": "\"1 apples and 0 oranges\",3",
        "output": "2"
      },
      {
        "input": "\"2 apples and 3 oranges\",100",
        "output": "95"
      },
      {
        "input": "\"2 apples and 3 oranges\",5",
        "output": "0"
      },
      {
        "input": "\"1 apples and 100 oranges\",120",
        "output": "19"
      }
    ]
  },
  {
    "id": "problem-69",
    "title": "Problem 69",
    "short_description": "\"Given an array representing a branch of a tree that has non-negative integer nodes",
    "description": "\"Given an array representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in a list,  smalest_value, its index ,\nIf there are no even values or the given array is empty, return .\nExample 1:\nInput: 4,2,3\nOutput: 2, 1\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\nInput: 1,2,3\nOutput: 2, 1\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\nInput:\nOutput:\nExample 4:\nInput: 5, 0, 3, 0, 4, 2\nOutput: 0, 1\nExplanation: 0 is the smallest value, but  there are two zeros,\nso we will choose the first zero, which has the smallest index.\nConstraints:\n* 1 <= nodes.length <= 10000\n* 0 <= node.value",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[4,2,3]",
        "output": "[2, 1], \"Error\""
      },
      {
        "input": "[1,2,3]",
        "output": "[2, 1], \"Error\""
      },
      {
        "input": "[]",
        "output": "[], \"Error\""
      },
      {
        "input": "[5, 0, 3, 0, 4, 2]",
        "output": "[0, 1], \"Error\""
      },
      {
        "input": "[1, 2, 3, 0, 5, 3]",
        "output": "[0, 3], \"Error\""
      },
      {
        "input": "[5, 4, 8, 4 ,8]",
        "output": "[4, 1], \"Error\""
      },
      {
        "input": "[7, 6, 7, 1]",
        "output": "[6, 1], \"Error\""
      },
      {
        "input": "[7, 9, 7, 1]",
        "output": "[], \"Error\""
      }
    ]
  },
  {
    "id": "problem-70",
    "title": "Problem 70",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[5, 5, 5, 5, 1]",
        "output": "1"
      },
      {
        "input": "[4, 1, 4, 1, 4, 4]",
        "output": "4"
      },
      {
        "input": "[3, 3]",
        "output": "-1"
      },
      {
        "input": "[8, 8, 8, 8, 8, 8, 8, 8]",
        "output": "8"
      },
      {
        "input": "[2, 3, 3, 2, 2]",
        "output": "2"
      },
      {
        "input": "[2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]",
        "output": "1"
      },
      {
        "input": "[3, 2, 8, 2]",
        "output": "2"
      },
      {
        "input": "[6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]",
        "output": "1"
      },
      {
        "input": "[8, 8, 3, 6, 5, 6, 4]",
        "output": "-1"
      },
      {
        "input": "[6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]",
        "output": "1"
      },
      {
        "input": "[1, 9, 10, 1, 3]",
        "output": "1"
      },
      {
        "input": "[6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]",
        "output": "5"
      },
      {
        "input": "[1]",
        "output": "1"
      },
      {
        "input": "[8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]",
        "output": "4"
      },
      {
        "input": "[2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]",
        "output": "2"
      },
      {
        "input": "[1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]",
        "output": "1"
      },
      {
        "input": "[9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]",
        "output": "4"
      },
      {
        "input": "[2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]",
        "output": "4"
      },
      {
        "input": "[9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]",
        "output": "2"
      },
      {
        "input": "[5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]",
        "output": "-1"
      },
      {
        "input": "[10]",
        "output": "-1"
      },
      {
        "input": "[9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]",
        "output": "2"
      },
      {
        "input": "[5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]",
        "output": "1"
      },
      {
        "input": "[7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]",
        "output": "1"
      },
      {
        "input": "[3, 10, 10, 9, 2]",
        "output": "-1"
      }
    ]
  },
  {
    "id": "problem-71",
    "title": "Problem 71",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[1, 2, 3, 4]",
        "output": "[1, 4, 2, 3]"
      },
      {
        "input": "[5, 6, 7, 8, 9]",
        "output": "[5, 9, 6, 8, 7]"
      },
      {
        "input": "[1, 2, 3, 4, 5]",
        "output": "[1, 5, 2, 4, 3]"
      },
      {
        "input": "[5, 6, 7, 8, 9, 1]",
        "output": "[1, 9, 5, 8, 6, 7]"
      },
      {
        "input": "[5, 5, 5, 5]",
        "output": "[5, 5, 5, 5]"
      },
      {
        "input": "[]",
        "output": "[]"
      },
      {
        "input": "[1,2,3,4,5,6,7,8]",
        "output": "[1, 8, 2, 7, 3, 6, 4, 5]"
      },
      {
        "input": "[0,2,2,2,5,5,-5,-5]",
        "output": "[-5, 5, -5, 5, 0, 2, 2, 2]"
      },
      {
        "input": "[111111]",
        "output": "[111111]"
      }
    ]
  },
  {
    "id": "problem-72",
    "title": "Problem 72",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "3, 4, 5",
        "output": "6.00, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "1, 2, 10",
        "output": "-1"
      },
      {
        "input": "4, 8, 5",
        "output": "8.18"
      },
      {
        "input": "2, 2, 2",
        "output": "1.73"
      },
      {
        "input": "1, 2, 3",
        "output": "-1"
      },
      {
        "input": "10, 5, 7",
        "output": "16.25"
      },
      {
        "input": "2, 6, 3",
        "output": "-1"
      },
      {
        "input": "1, 1, 1",
        "output": "0.43, \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "2, 2, 10",
        "output": "-1"
      }
    ]
  },
  {
    "id": "problem-73",
    "title": "Problem 73",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Medium",
    "tests": []
  },
  {
    "id": "problem-74",
    "title": "Problem 74",
    "short_description": "Given an array arr of integers, find the minimum number of elements that",
    "description": "Given an array arr of integers, find the minimum number of elements that\nneed to be changed to make the array palindromic. A palindromic array is an array that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\nsmallest_change(1,2,3,5,4,7,9,6) == 4\nsmallest_change(1, 2, 3, 4, 3, 2, 2) == 1\nsmallest_change(1, 2, 3, 2, 1) == 0",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[1,2,3,5,4,7,9,6]",
        "output": "4"
      },
      {
        "input": "[1, 2, 3, 4, 3, 2, 2]",
        "output": "1"
      },
      {
        "input": "[1, 4, 2]",
        "output": "1"
      },
      {
        "input": "[1, 4, 4, 2]",
        "output": "1"
      },
      {
        "input": "[1, 2, 3, 2, 1]",
        "output": "0"
      },
      {
        "input": "[3, 1, 1, 3]",
        "output": "0"
      },
      {
        "input": "[1]",
        "output": "0"
      },
      {
        "input": "[0, 1]",
        "output": "1"
      }
    ]
  },
  {
    "id": "problem-75",
    "title": "Problem 75",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[], []",
        "output": "[]"
      },
      {
        "input": "['hi', 'admin'], ['hi', 'hi']",
        "output": "['hi', 'hi']"
      },
      {
        "input": "['hi', 'admin'], ['hi', 'hi', 'admin', 'project']",
        "output": "['hi', 'admin']"
      },
      {
        "input": "['4'], ['1', '2', '3', '4', '5']",
        "output": "['4']"
      },
      {
        "input": "['hi', 'admin'], ['hI', 'Hi']",
        "output": "['hI', 'Hi']"
      },
      {
        "input": "['hi', 'admin'], ['hI', 'hi', 'hi']",
        "output": "['hI', 'hi', 'hi']"
      },
      {
        "input": "['hi', 'admin'], ['hI', 'hi', 'hii']",
        "output": "['hi', 'admin']"
      },
      {
        "input": "[], ['this']",
        "output": "[]"
      },
      {
        "input": "['this'], []",
        "output": "[]"
      }
    ]
  },
  {
    "id": "problem-76",
    "title": "Problem 76",
    "short_description": "Write a function that returns true if the given number is the multiplication of 3 prime numbers",
    "description": "Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100.\nExample:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "5",
        "output": "False"
      },
      {
        "input": "30",
        "output": "True"
      },
      {
        "input": "8",
        "output": "True"
      },
      {
        "input": "10",
        "output": "False"
      },
      {
        "input": "125",
        "output": "True"
      },
      {
        "input": "3 * 5 * 7",
        "output": "True"
      },
      {
        "input": "3 * 6 * 7",
        "output": "False"
      },
      {
        "input": "9 * 9 * 9",
        "output": "False"
      },
      {
        "input": "11 * 9 * 9",
        "output": "False"
      },
      {
        "input": "11 * 13 * 7",
        "output": "True"
      }
    ]
  },
  {
    "id": "problem-77",
    "title": "Problem 77",
    "short_description": "Your task is to write a function that returns true if a number x is a simple",
    "description": "Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "16, 2",
        "output": "True, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "143214, 16",
        "output": "False, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "4, 2",
        "output": "True, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "9, 3",
        "output": "True, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "16, 4",
        "output": "True, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "24, 2",
        "output": "False, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "128, 4",
        "output": "False, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "12, 6",
        "output": "False, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "1, 1",
        "output": "True, \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "1, 12",
        "output": "True, \"This prints if this assert fails 2 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-78",
    "title": "Problem 78",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "1",
        "output": "True, \"First test error: \" + str(candidate(1))"
      },
      {
        "input": "2",
        "output": "False, \"Second test error: \" + str(candidate(2))"
      },
      {
        "input": "-1",
        "output": "True, \"Third test error: \" + str(candidate(-1))"
      },
      {
        "input": "64",
        "output": "True, \"Fourth test error: \" + str(candidate(64))"
      },
      {
        "input": "180",
        "output": "False, \"Fifth test error: \" + str(candidate(180))"
      },
      {
        "input": "1000",
        "output": "True, \"Sixth test error: \" + str(candidate(1000))"
      },
      {
        "input": "0",
        "output": "True, \"1st edge test error: \" + str(candidate(0))"
      },
      {
        "input": "1729",
        "output": "False, \"2nd edge test error: \" + str(candidate(1728))"
      }
    ]
  },
  {
    "id": "problem-79",
    "title": "Problem 79",
    "short_description": "You have been tasked to write a function that receives",
    "description": "You have been tasked to write a function that receives\na hexadecimal number as a string and counts the number of hexadecimal\ndigits that are primes (prime number, or a prime, is a natural number\ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7,\nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string,\nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "\"AB\"",
        "output": "1, \"First test error: \" + str(candidate(\"AB\"))"
      },
      {
        "input": "\"1077E\"",
        "output": "2, \"Second test error: \" + str(candidate(\"1077E\"))"
      },
      {
        "input": "\"ABED1A33\"",
        "output": "4, \"Third test error: \" + str(candidate(\"ABED1A33\"))"
      },
      {
        "input": "\"2020\"",
        "output": "2, \"Fourth test error: \" + str(candidate(\"2020\"))"
      },
      {
        "input": "\"123456789ABCDEF0\"",
        "output": "6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))"
      },
      {
        "input": "\"112233445566778899AABBCCDDEEFF00\"",
        "output": "12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))"
      },
      {
        "input": "[]",
        "output": "0"
      }
    ]
  },
  {
    "id": "problem-80",
    "title": "Problem 80",
    "short_description": "You will be given a number in decimal form and your task is to convert it to",
    "description": "You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "0",
        "output": "\"db0db\""
      },
      {
        "input": "32",
        "output": "\"db100000db\""
      },
      {
        "input": "103",
        "output": "\"db1100111db\""
      },
      {
        "input": "15",
        "output": "\"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-81",
    "title": "Problem 81",
    "short_description": "You are given a string s.",
    "description": "You are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "\"a\"",
        "output": "False , \"a\""
      },
      {
        "input": "\"aa\"",
        "output": "False , \"aa\""
      },
      {
        "input": "\"abcd\"",
        "output": "True , \"abcd\""
      },
      {
        "input": "\"aabb\"",
        "output": "False , \"aabb\""
      },
      {
        "input": "\"adb\"",
        "output": "True , \"adb\""
      },
      {
        "input": "\"xyy\"",
        "output": "False , \"xyy\""
      },
      {
        "input": "\"iopaxpoi\"",
        "output": "True , \"iopaxpoi\""
      },
      {
        "input": "\"iopaxioi\"",
        "output": "False , \"iopaxioi\""
      }
    ]
  },
  {
    "id": "problem-82",
    "title": "Problem 82",
    "short_description": "It is the last week of the semester and the teacher has to give the grades",
    "description": "It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a list of GPAs for some students and you have to write\na function that can output a list of letter grades using the following table:\nGPA       |    Letter grade\n4.0                A+\n> 3.7                A\n> 3.3                A-\n> 3.0                B+\n> 2.7                B\n> 2.3                B-\n> 2.0                C+\n> 1.7                C\n> 1.3                C-\n> 1.0                D+\n> 0.7                D\n> 0.0                D-\n0.0                E\nExample:\ngrade_equation(4.0, 3, 1.7, 2, 3.5) ==> 'A+', 'B', 'C-', 'C', 'A-'",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[4.0, 3, 1.7, 2, 3.5]",
        "output": "['A+', 'B', 'C-', 'C', 'A-']"
      },
      {
        "input": "[1.2]",
        "output": "['D+']"
      },
      {
        "input": "[0.5]",
        "output": "['D-']"
      },
      {
        "input": "[0.0]",
        "output": "['E']"
      },
      {
        "input": "[1, 0.3, 1.5, 2.8, 3.3]",
        "output": "['D', 'D-', 'C-', 'B', 'B+']"
      },
      {
        "input": "[0, 0.7]",
        "output": "['E', 'D-']"
      }
    ]
  },
  {
    "id": "problem-83",
    "title": "Problem 83",
    "short_description": "Write a function that takes a string and returns True if the string",
    "description": "Write a function that takes a string and returns True if the string\nlength is a prime number or False otherwise\nExamples\nprime_length('Hello') == True\nprime_length('abcdcba') == True\nprime_length('kittens') == True\nprime_length('orange') == False",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "'Hello'",
        "output": "True"
      },
      {
        "input": "'abcdcba'",
        "output": "True"
      },
      {
        "input": "'kittens'",
        "output": "True"
      },
      {
        "input": "'orange'",
        "output": "False"
      },
      {
        "input": "'wow'",
        "output": "True"
      },
      {
        "input": "'world'",
        "output": "True"
      },
      {
        "input": "'MadaM'",
        "output": "True"
      },
      {
        "input": "'Wow'",
        "output": "True"
      },
      {
        "input": "''",
        "output": "False"
      },
      {
        "input": "'HI'",
        "output": "True"
      },
      {
        "input": "'go'",
        "output": "True"
      },
      {
        "input": "'gogo'",
        "output": "False"
      },
      {
        "input": "'aaaaaaaaaaaaaaa'",
        "output": "False"
      },
      {
        "input": "'Madam'",
        "output": "True"
      },
      {
        "input": "'M'",
        "output": "False"
      },
      {
        "input": "'0'",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-84",
    "title": "Problem 84",
    "short_description": "Given a positive integer n, return the count of the numbers of n-digit",
    "description": "Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "1",
        "output": "1"
      },
      {
        "input": "2",
        "output": "18"
      },
      {
        "input": "3",
        "output": "180"
      },
      {
        "input": "4",
        "output": "1800"
      },
      {
        "input": "5",
        "output": "18000"
      }
    ]
  },
  {
    "id": "problem-85",
    "title": "Problem 85",
    "short_description": "Given a positive integer N, return the total sum of its digits in binary.",
    "description": "Given a positive integer N, return the total sum of its digits in binary.\nExample\nFor N = 1000, the sum of digits will be 1 the output should be \"1\".\nFor N = 150, the sum of digits will be 6 the output should be \"110\".\nFor N = 147, the sum of digits will be 12 the output should be \"1100\".\nVariables:\n@N integer\nConstraints: 0 \u2264 N \u2264 10000.\nOutput:\na string of binary number",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "1000",
        "output": "\"1\", \"Error\""
      },
      {
        "input": "150",
        "output": "\"110\", \"Error\""
      },
      {
        "input": "147",
        "output": "\"1100\", \"Error\""
      },
      {
        "input": "333",
        "output": "\"1001\", \"Error\""
      },
      {
        "input": "963",
        "output": "\"10010\", \"Error\""
      }
    ]
  },
  {
    "id": "problem-86",
    "title": "Problem 86",
    "short_description": "Given a non-empty list of integers lst. add the even elements that are at odd indices..",
    "description": "Given a non-empty list of integers lst. add the even elements that are at odd indices..\nExamples:\nadd(4, 2, 6, 7) ==> 2",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[4, 88]",
        "output": "88"
      },
      {
        "input": "[4, 5, 6, 7, 2, 122]",
        "output": "122"
      },
      {
        "input": "[4, 0, 6, 7]",
        "output": "0"
      },
      {
        "input": "[4, 4, 6, 8]",
        "output": "12"
      }
    ]
  },
  {
    "id": "problem-87",
    "title": "Problem 87",
    "short_description": "Write a function that takes a string and returns an ordered version of it.",
    "description": "Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "'Hi'",
        "output": "'Hi'"
      },
      {
        "input": "'hello'",
        "output": "'ehllo'"
      },
      {
        "input": "'number'",
        "output": "'bemnru'"
      },
      {
        "input": "'abcd'",
        "output": "'abcd'"
      },
      {
        "input": "'Hello World!!!'",
        "output": "'Hello !!!Wdlor'"
      },
      {
        "input": "''",
        "output": "''"
      },
      {
        "input": "'Hi. My name is Mister Robot. How are you?'",
        "output": "'.Hi My aemn is Meirst .Rboot How aer ?ouy'"
      }
    ]
  },
  {
    "id": "problem-88",
    "title": "Problem 88",
    "short_description": "You are given a 2 dimensional data, as a nested lists,",
    "description": "You are given a 2 dimensional data, as a nested lists,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the list,\nand return list of tuples, (x1, y1), (x2, y2) ... such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\nget_row(\n1,2,3,4,5,6,\n1,2,3,4,1,6,\n1,2,3,4,5,1\n, 1) == (0, 0), (1, 4), (1, 0), (2, 5), (2, 0)\nget_row(, 1) ==\nget_row(, 1, 1, 2, 3, 3) == (2, 2)",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[], 1",
        "output": "[]"
      },
      {
        "input": "[[1]], 2",
        "output": "[]"
      },
      {
        "input": "[[], [1], [1, 2, 3]], 3",
        "output": "[(2, 2)]"
      }
    ]
  },
  {
    "id": "problem-89",
    "title": "Problem 89",
    "short_description": "Given an array of non-negative integers, return a copy of the given array after sorting,",
    "description": "Given an array of non-negative integers, return a copy of the given array after sorting,\nyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\nNote:\n* don't change the given array.\nExamples:\n* sort_array() =>\n* sort_array(5) => 5\n* sort_array(2, 4, 3, 0, 1, 5) => 0, 1, 2, 3, 4, 5\n* sort_array(2, 4, 3, 0, 1, 5, 6) => 6, 5, 4, 3, 2, 1, 0",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[]",
        "output": "[], \"Error\""
      },
      {
        "input": "[5]",
        "output": "[5], \"Error\""
      },
      {
        "input": "[2, 4, 3, 0, 1, 5]",
        "output": "[0, 1, 2, 3, 4, 5], \"Error\""
      },
      {
        "input": "[2, 4, 3, 0, 1, 5, 6]",
        "output": "[6, 5, 4, 3, 2, 1, 0], \"Error\""
      },
      {
        "input": "[2, 1]",
        "output": "[1, 2], \"Error\""
      },
      {
        "input": "[15, 42, 87, 32 ,11, 0]",
        "output": "[0, 11, 15, 32, 42, 87], \"Error\""
      },
      {
        "input": "[21, 14, 23, 11]",
        "output": "[23, 21, 14, 11], \"Error\""
      }
    ]
  },
  {
    "id": "problem-90",
    "title": "Problem 90",
    "short_description": "Create a function encrypt that takes a string as an argument and",
    "description": "Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated.\nThe alphabet should be rotated in a manner such that the letters\nshift down by two multiplied to two places.\nFor example:\nencrypt('hi') returns 'lm'\nencrypt('asdfghjkl') returns 'ewhjklnop'\nencrypt('gf') returns 'kj'\nencrypt('et') returns 'ix'",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "'hi'",
        "output": "'lm', \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "'asdfghjkl'",
        "output": "'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "'gf'",
        "output": "'kj', \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "'et'",
        "output": "'ix', \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "'faewfawefaewg'",
        "output": "'jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "'hellomyfriend'",
        "output": "'lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\""
      },
      {
        "input": "'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'",
        "output": "'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\""
      },
      {
        "input": "'a'",
        "output": "'e', \"This prints if this assert fails 2 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-91",
    "title": "Problem 91",
    "short_description": "You are given a list of integers.",
    "description": "You are given a list of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the list.\nReturn None if there is no such element.\nnext_smallest(1, 2, 3, 4, 5) == 2\nnext_smallest(5, 1, 4, 3, 2) == 2\nnext_smallest() == None\nnext_smallest(1, 1) == None",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[1, 2, 3, 4, 5]",
        "output": "2"
      },
      {
        "input": "[5, 1, 4, 3, 2]",
        "output": "2"
      },
      {
        "input": "[]",
        "output": "None"
      },
      {
        "input": "[1, 1]",
        "output": "None"
      },
      {
        "input": "[1,1,1,1,0]",
        "output": "1"
      },
      {
        "input": "[1, 0**0]",
        "output": "None"
      },
      {
        "input": "[-35, 34, 12, -45]",
        "output": "-35"
      }
    ]
  },
  {
    "id": "problem-92",
    "title": "Problem 92",
    "short_description": "You'll be given a string of words, and your task is to count the number of boredoms",
    "description": "You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "\"Hello world\"",
        "output": "0, \"Test 1\""
      },
      {
        "input": "\"Is the sky blue?\"",
        "output": "0, \"Test 2\""
      },
      {
        "input": "\"I love It !\"",
        "output": "1, \"Test 3\""
      },
      {
        "input": "\"bIt\"",
        "output": "0, \"Test 4\""
      },
      {
        "input": "\"I feel good today. I will be productive. will kill It\"",
        "output": "2, \"Test 5\""
      },
      {
        "input": "\"You and I are going for a walk\"",
        "output": "0, \"Test 6\""
      }
    ]
  },
  {
    "id": "problem-93",
    "title": "Problem 93",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "2, 3, 1",
        "output": "True, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "2.5, 2, 3",
        "output": "False, \"This prints if this assert fails 2 (good for debugging!)\""
      },
      {
        "input": "1.5, 5, 3.5",
        "output": "False, \"This prints if this assert fails 3 (good for debugging!)\""
      },
      {
        "input": "2, 6, 2",
        "output": "False, \"This prints if this assert fails 4 (good for debugging!)\""
      },
      {
        "input": "4, 2, 2",
        "output": "True, \"This prints if this assert fails 5 (good for debugging!)\""
      },
      {
        "input": "2.2, 2.2, 2.2",
        "output": "False, \"This prints if this assert fails 6 (good for debugging!)\""
      },
      {
        "input": "-4, 6, 2",
        "output": "True, \"This prints if this assert fails 7 (good for debugging!)\""
      },
      {
        "input": "2,1,1",
        "output": "True, \"This prints if this assert fails 8 (also good for debugging!)\""
      },
      {
        "input": "3,4,7",
        "output": "True, \"This prints if this assert fails 9 (also good for debugging!)\""
      },
      {
        "input": "3.0,4,7",
        "output": "False, \"This prints if this assert fails 10 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-94",
    "title": "Problem 94",
    "short_description": "Write a function that takes a message, and encodes in such a",
    "description": "Write a function that takes a message, and encodes in such a\nway that it swaps case of all letters, replaces all vowels in\nthe message with the letter that appears 2 places ahead of that\nvowel in the english alphabet.\nAssume only letters.\nExamples:\n>>> encode('test')\n'TGST'\n>>> encode('This is a message')\n'tHKS KS C MGSSCGG'",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "'TEST'",
        "output": "'tgst', \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "'Mudasir'",
        "output": "'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\""
      },
      {
        "input": "'YES'",
        "output": "'ygs', \"This prints if this assert fails 3 (good for debugging!)\""
      },
      {
        "input": "'This is a message'",
        "output": "'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "\"I DoNt KnOw WhAt tO WrItE\"",
        "output": "'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-95",
    "title": "Problem 95",
    "short_description": "You are given a list of integers.",
    "description": "You are given a list of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\nFor lst = 0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3 the output should be 10\nFor lst = 1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1 the output should be 25\nFor lst = 1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3 the output should be 13\nFor lst = 0,724,32,71,99,32,6,0,5,91,83,0,5,6 the output should be 11\nFor lst = 0,81,12,3,1,21 the output should be 3\nFor lst = 0,8,1,2,1,7 the output should be 7",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]",
        "output": "10, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]",
        "output": "25, \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "[1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]",
        "output": "13, \"This prints if this assert fails 3 (also good for debugging!)\""
      },
      {
        "input": "[0,724,32,71,99,32,6,0,5,91,83,0,5,6]",
        "output": "11, \"This prints if this assert fails 4 (also good for debugging!)\""
      },
      {
        "input": "[0,81,12,3,1,21]",
        "output": "3, \"This prints if this assert fails 5 (also good for debugging!)\""
      },
      {
        "input": "[0,8,1,2,1,7]",
        "output": "7, \"This prints if this assert fails 6 (also good for debugging!)\""
      },
      {
        "input": "[8191]",
        "output": "19, \"This prints if this assert fails 7 (also good for debugging!)\""
      },
      {
        "input": "[8191, 123456, 127, 7]",
        "output": "19, \"This prints if this assert fails 8 (also good for debugging!)\""
      },
      {
        "input": "[127, 97, 8192]",
        "output": "10, \"This prints if this assert fails 9 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-96",
    "title": "Problem 96",
    "short_description": "Given a dictionary, return True if all keys are strings in lower",
    "description": "Given a dictionary, return True if all keys are strings in lower\ncase or all keys are strings in upper case, else return False.\nThe function should return False is the given dictionary is empty.\nExamples:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "{\"p\":\"pineapple\", \"b\":\"banana\"}",
        "output": "True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))"
      },
      {
        "input": "{\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}",
        "output": "False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))"
      },
      {
        "input": "{\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}",
        "output": "False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))"
      },
      {
        "input": "{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}",
        "output": "False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))"
      },
      {
        "input": "{\"STATE\":\"NC\", \"ZIP\":\"12345\" }",
        "output": "True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))"
      },
      {
        "input": "{\"fruit\":\"Orange\", \"taste\":\"Sweet\" }",
        "output": "True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))"
      },
      {
        "input": "{}",
        "output": "False, \"1st edge test error: \" + str(candidate({}))"
      }
    ]
  },
  {
    "id": "problem-97",
    "title": "Problem 97",
    "short_description": "Implement a function that takes an non-negative integer and returns an array of the first n",
    "description": "Implement a function that takes an non-negative integer and returns an array of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => 2,3\ncount_up_to(11) => 2,3,5,7\ncount_up_to(0) =>\ncount_up_to(20) => 2,3,5,7,11,13,17,19\ncount_up_to(1) =>\ncount_up_to(18) => 2,3,5,7,11,13,17",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "5",
        "output": "[2,3]"
      },
      {
        "input": "6",
        "output": "[2,3,5]"
      },
      {
        "input": "7",
        "output": "[2,3,5]"
      },
      {
        "input": "10",
        "output": "[2,3,5,7]"
      },
      {
        "input": "0",
        "output": "[]"
      },
      {
        "input": "22",
        "output": "[2,3,5,7,11,13,17,19]"
      },
      {
        "input": "1",
        "output": "[]"
      },
      {
        "input": "18",
        "output": "[2,3,5,7,11,13,17]"
      },
      {
        "input": "47",
        "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]"
      },
      {
        "input": "101",
        "output": "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"
      }
    ]
  },
  {
    "id": "problem-98",
    "title": "Problem 98",
    "short_description": "Complete the function that takes two integers and returns",
    "description": "Complete the function that takes two integers and returns\nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "148, 412",
        "output": "16, \"First test error: \" + str(candidate(148, 412))"
      },
      {
        "input": "19, 28",
        "output": "72, \"Second test error: \" + str(candidate(19, 28))"
      },
      {
        "input": "2020, 1851",
        "output": "0, \"Third test error: \" + str(candidate(2020, 1851))"
      },
      {
        "input": "14,-15",
        "output": "20, \"Fourth test error: \" + str(candidate(14,-15))"
      },
      {
        "input": "76, 67",
        "output": "42, \"Fifth test error: \" + str(candidate(76, 67))"
      },
      {
        "input": "17, 27",
        "output": "49, \"Sixth test error: \" + str(candidate(17, 27))"
      },
      {
        "input": "0, 1",
        "output": "0, \"1st edge test error: \" + str(candidate(0, 1))"
      },
      {
        "input": "0, 0",
        "output": "0, \"2nd edge test error: \" + str(candidate(0, 0))"
      }
    ]
  },
  {
    "id": "problem-99",
    "title": "Problem 99",
    "short_description": "Given a string s, count the number of uppercase vowels in even indices.",
    "description": "Given a string s, count the number of uppercase vowels in even indices.\nFor example:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "'aBCdEf'",
        "output": "1"
      },
      {
        "input": "'abcdefg'",
        "output": "0"
      },
      {
        "input": "'dBBE'",
        "output": "0"
      },
      {
        "input": "'B'",
        "output": "0"
      },
      {
        "input": "'U'",
        "output": "1"
      },
      {
        "input": "''",
        "output": "0"
      },
      {
        "input": "'EEEE'",
        "output": "2"
      }
    ]
  },
  {
    "id": "problem-100",
    "title": "Problem 100",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "\"10\"",
        "output": "10, \"Test 1\""
      },
      {
        "input": "\"14.5\"",
        "output": "15, \"Test 2\""
      },
      {
        "input": "\"-15.5\"",
        "output": "-16, \"Test 3\""
      },
      {
        "input": "\"15.3\"",
        "output": "15, \"Test 3\""
      },
      {
        "input": "\"0\"",
        "output": "0, \"Test 0\""
      }
    ]
  },
  {
    "id": "problem-101",
    "title": "Problem 101",
    "short_description": "Given a positive integer n, you have to make a pile of n levels of stones.",
    "description": "Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n- the next odd number if n is odd.\n- the next even number if n is even.\nReturn the number of stones in each level in a list, where element at index\ni represents the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\n3, 5, 7",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "3",
        "output": "[3, 5, 7], \"Test 3\""
      },
      {
        "input": "4",
        "output": "[4,6,8,10], \"Test 4\""
      },
      {
        "input": "5",
        "output": "[5, 7, 9, 11, 13]"
      },
      {
        "input": "6",
        "output": "[6, 8, 10, 12, 14, 16]"
      },
      {
        "input": "8",
        "output": "[8, 10, 12, 14, 16, 18, 20, 22]"
      }
    ]
  },
  {
    "id": "problem-102",
    "title": "Problem 102",
    "short_description": "You will be given a string of words separated by commas or spaces. Your task is",
    "description": "You will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return an array of the words.\nFor example:\nwords_string(\"Hi, my name is John\") == \"Hi\", \"my\", \"name\", \"is\", \"John\"\nwords_string(\"One, two, three, four, five, six\") == \"One\", \"two\", \"three\", \"four\", \"five\", \"six\"",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "\"Hi, my name is John\"",
        "output": "[\"Hi\", \"my\", \"name\", \"is\", \"John\"]"
      },
      {
        "input": "\"One, two, three, four, five, six\"",
        "output": "[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
      },
      {
        "input": "\"Hi, my name\"",
        "output": "[\"Hi\", \"my\", \"name\"]"
      },
      {
        "input": "\"One,, two, three, four, five, six,\"",
        "output": "[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"
      },
      {
        "input": "\"\"",
        "output": "[]"
      },
      {
        "input": "\"ahmed     , gamal\"",
        "output": "[\"ahmed\", \"gamal\"]"
      }
    ]
  },
  {
    "id": "problem-103",
    "title": "Problem 103",
    "short_description": "This function takes two positive numbers x and y and returns the",
    "description": "This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range x, y inclusive. If\nthere's no such number, then the function should return -1.\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "12, 15",
        "output": "14"
      },
      {
        "input": "13, 12",
        "output": "-1"
      },
      {
        "input": "33, 12354",
        "output": "12354"
      },
      {
        "input": "5234, 5233",
        "output": "-1"
      },
      {
        "input": "6, 29",
        "output": "28"
      },
      {
        "input": "27, 10",
        "output": "-1"
      },
      {
        "input": "7, 7",
        "output": "-1"
      },
      {
        "input": "546, 546",
        "output": "546"
      }
    ]
  },
  {
    "id": "problem-104",
    "title": "Problem 104",
    "short_description": "You are given two positive integers n and m, and your task is to compute the",
    "description": "You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m).\nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\nrounded_avg(1, 5) => \"0b11\"\nrounded_avg(7, 5) => -1\nrounded_avg(10, 20) => \"0b1111\"\nrounded_avg(20, 33) => \"0b11010\"",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "1, 5",
        "output": "\"0b11\""
      },
      {
        "input": "7, 13",
        "output": "\"0b1010\""
      },
      {
        "input": "964,977",
        "output": "\"0b1111001010\""
      },
      {
        "input": "996,997",
        "output": "\"0b1111100100\""
      },
      {
        "input": "560,851",
        "output": "\"0b1011000010\""
      },
      {
        "input": "185,546",
        "output": "\"0b101101110\""
      },
      {
        "input": "362,496",
        "output": "\"0b110101101\""
      },
      {
        "input": "350,902",
        "output": "\"0b1001110010\""
      },
      {
        "input": "197,233",
        "output": "\"0b11010111\""
      },
      {
        "input": "7, 5",
        "output": "-1"
      },
      {
        "input": "5, 1",
        "output": "-1"
      },
      {
        "input": "5, 5",
        "output": "\"0b101\""
      }
    ]
  },
  {
    "id": "problem-105",
    "title": "Problem 105",
    "short_description": "Given a list of positive integers x. return a sorted list of all",
    "description": "Given a list of positive integers x. return a sorted list of all\nelements that hasn't any even digit.\nNote: Returned list should be sorted in increasing order.\nFor example:\n>>> unique_digits(15, 33, 1422, 1)\n1, 15, 33\n>>> unique_digits(152, 323, 1422, 10)",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[15, 33, 1422, 1]",
        "output": "[1, 15, 33]"
      },
      {
        "input": "[152, 323, 1422, 10]",
        "output": "[]"
      },
      {
        "input": "[12345, 2033, 111, 151]",
        "output": "[111, 151]"
      },
      {
        "input": "[135, 103, 31]",
        "output": "[31, 135]"
      }
    ]
  },
  {
    "id": "problem-106",
    "title": "Problem 106",
    "short_description": "Given an array of integers, sort the integers that are between 1 and 9 inclusive,",
    "description": "Given an array of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting array, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\narr = 2, 1, 1, 4, 5, 8, 2, 3\n-> sort arr -> 1, 1, 2, 2, 3, 4, 5, 8\n-> reverse arr -> 8, 5, 4, 3, 2, 2, 1, 1\nreturn \"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\nIf the array is empty, return an empty array:\narr =\nreturn\nIf the array has any strange number ignore it:\narr = 1, -1 , 55\n-> sort arr -> -1, 1, 55\n-> reverse arr -> 55, 1, -1\nreturn = 'One'",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[2, 1, 1, 4, 5, 8, 2, 3]",
        "output": "[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\""
      },
      {
        "input": "[]",
        "output": "[], \"Error\""
      },
      {
        "input": "[1, -1 , 55]",
        "output": "['One'], \"Error\""
      },
      {
        "input": "[1, -1, 3, 2]",
        "output": "[\"Three\", \"Two\", \"One\"]"
      },
      {
        "input": "[9, 4, 8]",
        "output": "[\"Nine\", \"Eight\", \"Four\"]"
      }
    ]
  },
  {
    "id": "problem-107",
    "title": "Problem 107",
    "short_description": "Implement the function f that takes n as a parameter,",
    "description": "Implement the function f that takes n as a parameter,\nand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == 1, 2, 6, 24, 15",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "5",
        "output": "[1, 2, 6, 24, 15]"
      },
      {
        "input": "7",
        "output": "[1, 2, 6, 24, 15, 720, 28]"
      },
      {
        "input": "1",
        "output": "[1]"
      },
      {
        "input": "3",
        "output": "[1, 2, 6]"
      }
    ]
  },
  {
    "id": "problem-108",
    "title": "Problem 108",
    "short_description": "Given a positive integer n, return a tuple that has the number of even and odd",
    "description": "Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\nInput: 3\nOutput: (1, 2)\nExplanation:\nInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\nInput: 12\nOutput: (4, 6)\nExplanation:\nInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n1. 1 <= n <= 10^3\n2. returned tuple has the number of even and odd integer palindromes respectively.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "123",
        "output": "(8, 13)"
      },
      {
        "input": "12",
        "output": "(4, 6)"
      },
      {
        "input": "3",
        "output": "(1, 2)"
      },
      {
        "input": "63",
        "output": "(6, 8)"
      },
      {
        "input": "25",
        "output": "(5, 6)"
      },
      {
        "input": "19",
        "output": "(4, 6)"
      },
      {
        "input": "9",
        "output": "(4, 5), \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "1",
        "output": "(0, 1), \"This prints if this assert fails 2 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-109",
    "title": "Problem 109",
    "short_description": "Write a function count_nums which takes an array of integers and returns",
    "description": "Write a function count_nums which takes an array of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums() == 0\n>>> count_nums(-1, 11, -11) == 1\n>>> count_nums(1, 1, 2) == 3",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[]",
        "output": "0"
      },
      {
        "input": "[-1, -2, 0]",
        "output": "0"
      },
      {
        "input": "[1, 1, 2, -2, 3, 4, 5]",
        "output": "6"
      },
      {
        "input": "[1, 6, 9, -6, 0, 1, 5]",
        "output": "5"
      },
      {
        "input": "[1, 100, 98, -7, 1, -1]",
        "output": "4"
      },
      {
        "input": "[12, 23, 34, -45, -56, 0]",
        "output": "5"
      },
      {
        "input": "[-0, 1**0]",
        "output": "1"
      },
      {
        "input": "[1]",
        "output": "1"
      }
    ]
  },
  {
    "id": "problem-110",
    "title": "Problem 110",
    "short_description": "We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The",
    "description": "We have an array 'arr' of N integers arr1, arr2, ..., arrN.The\nnumbers in the array will be randomly ordered. Your task is to determine if\nit is possible to get an array sorted in non-decreasing order by performing\nthe following operation on the given array:\nYou are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the array by one\nposition in the right direction. The last element of the array will be moved to\nthe starting position in the array i.e. 0th index.\nIf it is possible to obtain the sorted array by performing the above operation\nthen return True else return False.\nIf the given array is empty then return True.\nNote: The given list is guaranteed to have unique elements.\nFor Example:\nmove_one_ball(3, 4, 5, 1, 2)==>True\nExplanation: By performin 2 right shift operations, non-decreasing order can\nbe achieved for the given array.\nmove_one_ball(3, 5, 4, 1, 2)==>False\nExplanation:It is not possible to get non-decreasing order for the given\narray by performing any number of right shift operations.",
    "difficulty": "Medium",
    "tests": [
      {
        "input": "[3, 4, 5, 1, 2]",
        "output": "True, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[3, 5, 10, 1, 2]",
        "output": "True"
      },
      {
        "input": "[4, 3, 1, 2]",
        "output": "False"
      },
      {
        "input": "[3, 5, 4, 1, 2]",
        "output": "False, \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "[]",
        "output": "True"
      }
    ]
  },
  {
    "id": "problem-111",
    "title": "Problem 111",
    "short_description": "In this problem, you will implement a function that takes two lists of numbers,",
    "description": "In this problem, you will implement a function that takes two lists of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a list of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange(1, 2, 3, 4, 1, 2, 3, 4) => \"YES\"\nexchange(1, 2, 3, 4, 1, 5, 3, 4) => \"NO\"\nIt is assumed that the input lists will be non-empty.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[1, 2, 3, 4], [1, 2, 3, 4]",
        "output": "\"YES\""
      },
      {
        "input": "[1, 2, 3, 4], [1, 5, 3, 4]",
        "output": "\"NO\""
      },
      {
        "input": "[1, 2, 3, 4], [2, 1, 4, 3]",
        "output": "\"YES\""
      },
      {
        "input": "[5, 7, 3], [2, 6, 4]",
        "output": "\"YES\""
      },
      {
        "input": "[5, 7, 3], [2, 6, 3]",
        "output": "\"NO\""
      },
      {
        "input": "[3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]",
        "output": "\"NO\""
      },
      {
        "input": "[100, 200], [200, 200]",
        "output": "\"YES\""
      }
    ]
  },
  {
    "id": "problem-112",
    "title": "Problem 112",
    "short_description": "Given a string representing a space separated lowercase letters, return a dictionary",
    "description": "Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\nExample:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "'a b b a'",
        "output": "{'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "'a b c a b'",
        "output": "{'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\""
      },
      {
        "input": "'a b c d g'",
        "output": "{'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\""
      },
      {
        "input": "'r t g'",
        "output": "{'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\""
      },
      {
        "input": "'b b b b a'",
        "output": "{'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\""
      },
      {
        "input": "'r t g'",
        "output": "{'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\""
      },
      {
        "input": "''",
        "output": "{}, \"This prints if this assert fails 7 (also good for debugging!)\""
      },
      {
        "input": "'a'",
        "output": "{'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-113",
    "title": "Problem 113",
    "short_description": "Task",
    "description": "Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and True/False for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"abcde\",\"ae\"",
        "output": "('bcd',False)"
      },
      {
        "input": "\"abcdef\", \"b\"",
        "output": "('acdef',False)"
      },
      {
        "input": "\"abcdedcba\",\"ab\"",
        "output": "('cdedc',True)"
      },
      {
        "input": "\"dwik\",\"w\"",
        "output": "('dik',False)"
      },
      {
        "input": "\"a\",\"a\"",
        "output": "('',True)"
      },
      {
        "input": "\"abcdedcba\",\"\"",
        "output": "('abcdedcba',True)"
      },
      {
        "input": "\"abcdedcba\",\"v\"",
        "output": "('abcdedcba',True)"
      },
      {
        "input": "\"vabba\",\"v\"",
        "output": "('abba',True)"
      },
      {
        "input": "\"mamma\", \"mia\"",
        "output": "(\"\", True)"
      }
    ]
  },
  {
    "id": "problem-114",
    "title": "Problem 114",
    "short_description": "Given a list of strings, where each string consists of only digits, return a list.",
    "description": "Given a list of strings, where each string consists of only digits, return a list.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n>>> odd_count('1234567')\n\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\n>>> odd_count('3',\"11111111\")\n\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\"the number of odd elements 8n the str8ng 8 of the 8nput.\"",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "['1234567']",
        "output": "[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\""
      },
      {
        "input": "['3',\"11111111\"]",
        "output": "[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\""
      },
      {
        "input": "['271', '137', '314']",
        "output": "["
      }
    ]
  },
  {
    "id": "problem-115",
    "title": "Problem 115",
    "short_description": "Given an array of integers nums, find the minimum sum of any non-empty sub-array",
    "description": "Given an array of integers nums, find the minimum sum of any non-empty sub-array\nof nums.\nExample\nminSubArraySum(2, 3, 4, 1, 2, 4) == 1\nminSubArraySum(-1, -2, -3) == -6",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[2, 3, 4, 1, 2, 4]",
        "output": "1, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[-1, -2, -3]",
        "output": "-6"
      },
      {
        "input": "[-1, -2, -3, 2, -10]",
        "output": "-14"
      },
      {
        "input": "[-9999999999999999]",
        "output": "-9999999999999999"
      },
      {
        "input": "[0, 10, 20, 1000000]",
        "output": "0"
      },
      {
        "input": "[-1, -2, -3, 10, -5]",
        "output": "-6"
      },
      {
        "input": "[100, -1, -2, -3, 10, -5]",
        "output": "-6"
      },
      {
        "input": "[10, 11, 13, 8, 3, 4]",
        "output": "3"
      },
      {
        "input": "[100, -33, 32, -1, 0, -2]",
        "output": "-33"
      },
      {
        "input": "[-10]",
        "output": "-10, \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "[7]",
        "output": "7"
      },
      {
        "input": "[1, -1]",
        "output": "-1"
      }
    ]
  },
  {
    "id": "problem-116",
    "title": "Problem 116",
    "short_description": "You are given a rectangular grid of wells. Each row represents a single well,",
    "description": "You are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it,\nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\nInput:\ngrid : 0,0,1,0, 0,1,0,0, 1,1,1,1\nbucket_capacity : 1\nOutput: 6\nExample 2:\nInput:\ngrid : 0,0,1,1, 0,0,0,0, 1,1,1,1, 0,1,1,1\nbucket_capacity : 2\nOutput: 5\nExample 3:\nInput:\ngrid : 0,0,0, 0,0,0\nbucket_capacity : 5\nOutput: 0\nConstraints:\n* all wells have the same length\n* 1 <= grid.length <= 10^2\n* 1 <= grid:,1.length <= 10^2\n* gridij -> 0 | 1\n* 1 <= capacity <= 10",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1",
        "output": "6, \"Error\""
      },
      {
        "input": "[[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2",
        "output": "5, \"Error\""
      },
      {
        "input": "[[0,0,0], [0,0,0]], 5",
        "output": "0, \"Error\""
      },
      {
        "input": "[[1,1,1,1], [1,1,1,1]], 2",
        "output": "4, \"Error\""
      },
      {
        "input": "[[1,1,1,1], [1,1,1,1]], 9",
        "output": "2, \"Error\""
      }
    ]
  },
  {
    "id": "problem-117",
    "title": "Problem 117",
    "short_description": "In this Kata, you have to sort an array of non-negative integers according to",
    "description": "In this Kata, you have to sort an array of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\nIt must be implemented like this:\n>>> sort_array(1, 5, 2, 3, 4) == 1, 2, 3, 4, 5\n>>> sort_array(-2, -3, -4, -5, -6) == -6, -5, -4, -3, -2\n>>> sort_array(1, 0, 2, 3, 4) 0, 1, 2, 3, 4",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[1,5,2,3,4]",
        "output": "[1, 2, 4, 3, 5]"
      },
      {
        "input": "[-2,-3,-4,-5,-6]",
        "output": "[-4, -2, -6, -5, -3]"
      },
      {
        "input": "[1,0,2,3,4]",
        "output": "[0, 1, 2, 4, 3]"
      },
      {
        "input": "[]",
        "output": "[]"
      },
      {
        "input": "[2,5,77,4,5,3,5,7,2,3,4]",
        "output": "[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]"
      },
      {
        "input": "[3,6,44,12,32,5]",
        "output": "[32, 3, 5, 6, 12, 44]"
      },
      {
        "input": "[2,4,8,16,32]",
        "output": "[2, 4, 8, 16, 32]"
      },
      {
        "input": "[2,4,8,16,32]",
        "output": "[2, 4, 8, 16, 32]"
      }
    ]
  },
  {
    "id": "problem-118",
    "title": "Problem 118",
    "short_description": "Given a string s and a natural number n, you have been tasked to implement",
    "description": "Given a string s and a natural number n, you have been tasked to implement\na function that returns a list of all words from string s that contain exactly\nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty list.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> \"little\"\nselect_words(\"Mary had a little lamb\", 3) ==> \"Mary\", \"lamb\"\nselect_words(\"simple white space\", 2) ==>\nselect_words(\"Hello world\", 4) ==> \"world\"\nselect_words(\"Uncle sam\", 3) ==> \"Uncle\"",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"Mary had a little lamb\", 4",
        "output": "[\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))"
      },
      {
        "input": "\"Mary had a little lamb\", 3",
        "output": "[\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))"
      },
      {
        "input": "\"simple white space\", 2",
        "output": "[], \"Third test error: \" + str(candidate(\"simple white space\", 2))"
      },
      {
        "input": "\"Hello world\", 4",
        "output": "[\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))"
      },
      {
        "input": "\"Uncle sam\", 3",
        "output": "[\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))"
      },
      {
        "input": "\"\", 4",
        "output": "[], \"1st edge test error: \" + str(candidate(\"\", 4))"
      },
      {
        "input": "\"a b c d e f\", 1",
        "output": "[\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))"
      }
    ]
  },
  {
    "id": "problem-119",
    "title": "Problem 119",
    "short_description": "You are given a word. Your task is to find the closest vowel that stands between",
    "description": "You are given a word. Your task is to find the closest vowel that stands between\ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition.\nYou may assume that the given string contains English letter only.\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"yogurt\"",
        "output": "\"u\""
      },
      {
        "input": "\"full\"",
        "output": "\"u\""
      },
      {
        "input": "\"easy\"",
        "output": "\"\""
      },
      {
        "input": "\"eAsy\"",
        "output": "\"\""
      },
      {
        "input": "\"ali\"",
        "output": "\"\""
      },
      {
        "input": "\"bad\"",
        "output": "\"a\""
      },
      {
        "input": "\"most\"",
        "output": "\"o\""
      },
      {
        "input": "\"ab\"",
        "output": "\"\""
      },
      {
        "input": "\"ba\"",
        "output": "\"\""
      },
      {
        "input": "\"quick\"",
        "output": "\"\""
      },
      {
        "input": "\"anime\"",
        "output": "\"i\""
      },
      {
        "input": "\"Asia\"",
        "output": "\"\""
      },
      {
        "input": "\"Above\"",
        "output": "\"o\""
      }
    ]
  },
  {
    "id": "problem-120",
    "title": "Problem 120",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "['()(', ')']",
        "output": "'Yes'"
      },
      {
        "input": "[')', ')']",
        "output": "'No'"
      },
      {
        "input": "['(()(())', '())())']",
        "output": "'No'"
      },
      {
        "input": "[')())', '(()()(']",
        "output": "'Yes'"
      },
      {
        "input": "['(())))', '(()())((']",
        "output": "'Yes'"
      },
      {
        "input": "['()', '())']",
        "output": "'No'"
      },
      {
        "input": "['(()(', '()))()']",
        "output": "'Yes'"
      },
      {
        "input": "['((((', '((())']",
        "output": "'No'"
      },
      {
        "input": "[')(()', '(()(']",
        "output": "'No'"
      },
      {
        "input": "[')(', ')(']",
        "output": "'No'"
      },
      {
        "input": "['(', ')']",
        "output": "'Yes'"
      },
      {
        "input": "[')', '(']",
        "output": "'Yes'"
      }
    ]
  },
  {
    "id": "problem-121",
    "title": "Problem 121",
    "short_description": "Given an array arr of integers and a positive integer k, return a sorted list",
    "description": "Given an array arr of integers and a positive integer k, return a sorted list\nof length k with the maximum k numbers in arr.\nExample 1:\nInput: arr = -3, -4, 5, k = 3\nOutput: -4, -3, 5\nExample 2:\nInput: arr = 4, -4, 4, k = 2\nOutput: 4, 4\nExample 3:\nInput: arr = -3, 2, 1, 2, -1, -2, 1, k = 1\nOutput: 2\nNote:\n1. The length of the array will be in the range of 1, 1000.\n2. The elements in the array will be in the range of -1000, 1000.\n3. 0 <= k <= len(arr)",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[-3, -4, 5], 3",
        "output": "[-4, -3, 5]"
      },
      {
        "input": "[4, -4, 4], 2",
        "output": "[4, 4]"
      },
      {
        "input": "[-3, 2, 1, 2, -1, -2, 1], 1",
        "output": "[2]"
      },
      {
        "input": "[123, -123, 20, 0 , 1, 2, -3], 3",
        "output": "[2, 20, 123]"
      },
      {
        "input": "[-123, 20, 0 , 1, 2, -3], 4",
        "output": "[0, 1, 2, 20]"
      },
      {
        "input": "[5, 15, 0, 3, -13, -8, 0], 7",
        "output": "[-13, -8, 0, 0, 3, 5, 15]"
      },
      {
        "input": "[-1, 0, 2, 5, 3, -10], 2",
        "output": "[3, 5]"
      },
      {
        "input": "[1, 0, 5, -7], 1",
        "output": "[5]"
      },
      {
        "input": "[4, -4], 2",
        "output": "[-4, 4]"
      },
      {
        "input": "[-10, 10], 2",
        "output": "[-10, 10]"
      },
      {
        "input": "[1, 2, 3, -23, 243, -400, 0], 0",
        "output": "[]"
      }
    ]
  },
  {
    "id": "problem-122",
    "title": "Problem 122",
    "short_description": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.",
    "description": "Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\nExamples\nsolution(5, 8, 7, 1) ==> 12\nsolution(3, 3, 3, 3, 3) ==> 9\nsolution(30, 13, 24, 321) ==>0",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[5, 8, 7, 1]",
        "output": "12"
      },
      {
        "input": "[3, 3, 3, 3, 3]",
        "output": "9"
      },
      {
        "input": "[30, 13, 24, 321]",
        "output": "0"
      },
      {
        "input": "[5, 9]",
        "output": "5"
      },
      {
        "input": "[2, 4, 8]",
        "output": "0"
      },
      {
        "input": "[30, 13, 23, 32]",
        "output": "23"
      },
      {
        "input": "[3, 13, 2, 9]",
        "output": "3"
      }
    ]
  },
  {
    "id": "problem-123",
    "title": "Problem 123",
    "short_description": "Given a non-empty array of integers arr and an integer k, return",
    "description": "Given a non-empty array of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nExample:\nInput: arr = 111,21,3,4000,5,6,7,8,9, k = 4\nOutput: 24 # sum of 21 + 3\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[1,-2,-3,41,57,76,87,88,99], 3",
        "output": "-4"
      },
      {
        "input": "[111,121,3,4000,5,6], 2",
        "output": "0"
      },
      {
        "input": "[11,21,3,90,5,6,7,8,9], 4",
        "output": "125"
      },
      {
        "input": "[111,21,3,4000,5,6,7,8,9], 4",
        "output": "24, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[1], 1",
        "output": "1, \"This prints if this assert fails 2 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-124",
    "title": "Problem 124",
    "short_description": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.",
    "description": "Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the\nprevious term as follows: if the previous term is even, the next term is one half of\nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote:\n1. Collatz(1) is 1.\n2. returned list sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns 1, 5 # The collatz sequence for 5 is 5, 16, 8, 4, 2, 1, so the odd numbers are only 1, and 5.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "14",
        "output": "[1, 5, 7, 11, 13, 17]"
      },
      {
        "input": "5",
        "output": "[1, 5]"
      },
      {
        "input": "12",
        "output": "[1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "1",
        "output": "[1], \"This prints if this assert fails 2 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-125",
    "title": "Problem 125",
    "short_description": "You have to write a function which validates a given date string and",
    "description": "You have to write a function which validates a given date string and\nreturns True if the date is valid otherwise False.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\nfor example:\nvalid_date('03-11-2000') => True\nvalid_date('15-01-2012') => False\nvalid_date('04-0-2040') => False\nvalid_date('06-04-2020') => True\nvalid_date('06/04/2020') => False",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "'03-11-2000'",
        "output": "True"
      },
      {
        "input": "'15-01-2012'",
        "output": "False"
      },
      {
        "input": "'04-0-2040'",
        "output": "False"
      },
      {
        "input": "'06-04-2020'",
        "output": "True"
      },
      {
        "input": "'01-01-2007'",
        "output": "True"
      },
      {
        "input": "'03-32-2011'",
        "output": "False"
      },
      {
        "input": "''",
        "output": "False"
      },
      {
        "input": "'04-31-3000'",
        "output": "False"
      },
      {
        "input": "'06-06-2005'",
        "output": "True"
      },
      {
        "input": "'21-31-2000'",
        "output": "False"
      },
      {
        "input": "'04-12-2003'",
        "output": "True"
      },
      {
        "input": "'04122003'",
        "output": "False"
      },
      {
        "input": "'20030412'",
        "output": "False"
      },
      {
        "input": "'2003-04'",
        "output": "False"
      },
      {
        "input": "'2003-04-12'",
        "output": "False"
      },
      {
        "input": "'04-2003'",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-126",
    "title": "Problem 126",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"Hello world!\"",
        "output": "[\"Hello\",\"world!\"]"
      },
      {
        "input": "\"Hello,world!\"",
        "output": "[\"Hello\",\"world!\"]"
      },
      {
        "input": "\"Hello world,!\"",
        "output": "[\"Hello\",\"world,!\"]"
      },
      {
        "input": "\"Hello,Hello,world !\"",
        "output": "[\"Hello,Hello,world\",\"!\"]"
      },
      {
        "input": "\"abcdef\"",
        "output": "3"
      },
      {
        "input": "\"aaabb\"",
        "output": "2"
      },
      {
        "input": "\"aaaBb\"",
        "output": "1"
      },
      {
        "input": "\"\"",
        "output": "0"
      }
    ]
  },
  {
    "id": "problem-127",
    "title": "Problem 127",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[5]",
        "output": "True"
      },
      {
        "input": "[1, 2, 3, 4, 5]",
        "output": "True"
      },
      {
        "input": "[1, 3, 2, 4, 5]",
        "output": "False"
      },
      {
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "True"
      },
      {
        "input": "[1, 2, 3, 4, 5, 6, 7]",
        "output": "True"
      },
      {
        "input": "[1, 3, 2, 4, 5, 6, 7]",
        "output": "False, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[]",
        "output": "True, \"This prints if this assert fails 2 (good for debugging!)\""
      },
      {
        "input": "[1]",
        "output": "True, \"This prints if this assert fails 3 (good for debugging!)\""
      },
      {
        "input": "[3, 2, 1]",
        "output": "False, \"This prints if this assert fails 4 (good for debugging!)\""
      },
      {
        "input": "[1, 2, 2, 2, 3, 4]",
        "output": "False, \"This prints if this assert fails 5 (good for debugging!)\""
      },
      {
        "input": "[1, 2, 3, 3, 3, 4]",
        "output": "False, \"This prints if this assert fails 6 (good for debugging!)\""
      },
      {
        "input": "[1, 2, 2, 3, 3, 4]",
        "output": "True, \"This prints if this assert fails 7 (good for debugging!)\""
      },
      {
        "input": "[1, 2, 3, 4]",
        "output": "True, \"This prints if this assert fails 8 (good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-128",
    "title": "Problem 128",
    "short_description": "You are given two intervals,",
    "description": "You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two\nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\ninput/output samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "(1, 2), (2, 3)",
        "output": "\"NO\""
      },
      {
        "input": "(-1, 1), (0, 4)",
        "output": "\"NO\""
      },
      {
        "input": "(-3, -1), (-5, 5)",
        "output": "\"YES\""
      },
      {
        "input": "(-2, 2), (-4, 0)",
        "output": "\"YES\""
      },
      {
        "input": "(-11, 2), (-1, -1)",
        "output": "\"NO\""
      },
      {
        "input": "(1, 2), (3, 5)",
        "output": "\"NO\""
      },
      {
        "input": "(1, 2), (1, 2)",
        "output": "\"NO\""
      },
      {
        "input": "(-2, -2), (-3, -2)",
        "output": "\"NO\""
      }
    ]
  },
  {
    "id": "problem-129",
    "title": "Problem 129",
    "short_description": "You are given an array arr of integers and you need to return",
    "description": "You are given an array arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote: return None for empty arr.\nExample:\n>>> prod_signs(1, 2, 2, -4) == -9\n>>> prod_signs(0, 1) == 0\n>>> prod_signs() == None",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[1, 2, 2, -4]",
        "output": "-9"
      },
      {
        "input": "[0, 1]",
        "output": "0"
      },
      {
        "input": "[1, 1, 1, 2, 3, -1, 1]",
        "output": "-10"
      },
      {
        "input": "[]",
        "output": "None"
      },
      {
        "input": "[2, 4,1, 2, -1, -1, 9]",
        "output": "20"
      },
      {
        "input": "[-1, 1, -1, 1]",
        "output": "4"
      },
      {
        "input": "[-1, 1, 1, 1]",
        "output": "-4"
      },
      {
        "input": "[-1, 1, 1, 0]",
        "output": "0"
      }
    ]
  },
  {
    "id": "problem-130",
    "title": "Problem 130",
    "short_description": "Given a grid with N rows and N columns (N >= 2) and a positive integer k,",
    "description": "Given a grid with N rows and N columns (N >= 2) and a positive integer k,\neach cell of the grid contains a value. Every integer in the range 1, N * N\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered lists of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_Ai < lst_Bi and for any j (1 <= j < i) we have\nlst_Aj = lst_Bj.\nIt is guaranteed that the answer is unique.\nReturn an ordered list of the values on the cells that the minimum path go through.\nExamples:\nInput: grid =  1,2,3, 4,5,6, 7,8,9, k = 3\nOutput: 1, 2, 1\nInput: grid =  5,9,3, 4,1,6, 7,8,2, k = 1\nOutput: 1",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3",
        "output": "[1, 2, 1]"
      },
      {
        "input": "[[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1",
        "output": "[1]"
      },
      {
        "input": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4",
        "output": "[1, 2, 1, 2]"
      },
      {
        "input": "[[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7",
        "output": "[1, 10, 1, 10, 1, 10, 1]"
      },
      {
        "input": "[[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5",
        "output": "[1, 7, 1, 7, 1]"
      },
      {
        "input": "[[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9",
        "output": "[1, 6, 1, 6, 1, 6, 1, 6, 1]"
      },
      {
        "input": "[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12",
        "output": "[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]"
      },
      {
        "input": "[[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8",
        "output": "[1, 3, 1, 3, 1, 3, 1, 3]"
      },
      {
        "input": "[[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8",
        "output": "[1, 5, 1, 5, 1, 5, 1, 5]"
      },
      {
        "input": "[[1, 2], [3, 4]], 10",
        "output": "[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]"
      },
      {
        "input": "[[1, 3], [3, 2]], 10",
        "output": "[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]"
      }
    ]
  },
  {
    "id": "problem-131",
    "title": "Problem 131",
    "short_description": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in",
    "description": "Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in\nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nYou are given a non-negative integer number n, you have to a return a list of the\nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = 1, 3, 2, 8",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "3",
        "output": "[1, 3, 2.0, 8.0]"
      },
      {
        "input": "4",
        "output": "[1, 3, 2.0, 8.0, 3.0]"
      },
      {
        "input": "5",
        "output": "[1, 3, 2.0, 8.0, 3.0, 15.0]"
      },
      {
        "input": "6",
        "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]"
      },
      {
        "input": "7",
        "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]"
      },
      {
        "input": "8",
        "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]"
      },
      {
        "input": "9",
        "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]"
      },
      {
        "input": "20",
        "output": "[1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]"
      },
      {
        "input": "0",
        "output": "[1]"
      },
      {
        "input": "1",
        "output": "[1, 3]"
      }
    ]
  },
  {
    "id": "problem-132",
    "title": "Problem 132",
    "short_description": "Given a positive integer n, return the product of the odd digits.",
    "description": "Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "5",
        "output": "5"
      },
      {
        "input": "54",
        "output": "5"
      },
      {
        "input": "120",
        "output": "1"
      },
      {
        "input": "5014",
        "output": "5"
      },
      {
        "input": "98765",
        "output": "315"
      },
      {
        "input": "5576543",
        "output": "2625"
      },
      {
        "input": "2468",
        "output": "0"
      }
    ]
  },
  {
    "id": "problem-133",
    "title": "Problem 133",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "'[[]]'",
        "output": "True, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "'[]]]]]]][[[[[]'",
        "output": "False"
      },
      {
        "input": "'[][]'",
        "output": "False"
      },
      {
        "input": "('[]')",
        "output": "False"
      },
      {
        "input": "'[[[[]]]]'",
        "output": "True"
      },
      {
        "input": "'[]]]]]]]]]]'",
        "output": "False"
      },
      {
        "input": "'[][][[]]'",
        "output": "True"
      },
      {
        "input": "'[[]'",
        "output": "False"
      },
      {
        "input": "'[]]'",
        "output": "False"
      },
      {
        "input": "'[[]][['",
        "output": "True"
      },
      {
        "input": "'[[][]]'",
        "output": "True"
      },
      {
        "input": "''",
        "output": "False, \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "'[[[[[[[['",
        "output": "False"
      },
      {
        "input": "']]]]]]]]'",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-134",
    "title": "Problem 134",
    "short_description": "You are given a list of numbers.",
    "description": "You are given a list of numbers.\nYou need to return the sum of squared numbers in the given list,\nround each element in the list to the upper int(Ceiling) first.\nExamples:\nFor lst = 1,2,3 the output should be 14\nFor lst = 1,4,9 the output should be 98\nFor lst = 1,3,5,7 the output should be 84\nFor lst = 1.4,4.2,0 the output should be 29\nFor lst = -2.4,1,1 the output should be 6",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[1,2,3]",
        "output": "14, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[1.0,2,3]",
        "output": "14, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[1,3,5,7]",
        "output": "84, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[1.4,4.2,0]",
        "output": "29, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[-2.4,1,1]",
        "output": "6, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[100,1,15,2]",
        "output": "10230, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[10000,10000]",
        "output": "200000000, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[-1.4,4.6,6.3]",
        "output": "75, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[-1.4,17.9,18.9,19.9]",
        "output": "1086, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[0]",
        "output": "0, \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "[-1]",
        "output": "1, \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "[-1,1,0]",
        "output": "2, \"This prints if this assert fails 2 (also good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-135",
    "title": "Problem 135",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"apple\"",
        "output": "False"
      },
      {
        "input": "\"apple pi e\"",
        "output": "True"
      },
      {
        "input": "\"eeeee\"",
        "output": "False"
      },
      {
        "input": "\"A\"",
        "output": "True"
      },
      {
        "input": "\"Pumpkin pie \"",
        "output": "False"
      },
      {
        "input": "\"Pumpkin pie 1\"",
        "output": "False"
      },
      {
        "input": "\"\"",
        "output": "False"
      },
      {
        "input": "\"eeeee e \"",
        "output": "False"
      },
      {
        "input": "\"apple pie\"",
        "output": "False"
      },
      {
        "input": "\"apple pi e \"",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-136",
    "title": "Problem 136",
    "short_description": "Create a function which returns the largest index of an element which",
    "description": "Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given array will not contain\nduplicate values.\nExamples:\ncan_arrange(1,2,4,3,5) = 3\ncan_arrange(1,2,3) = -1",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[1,2,4,3,5]",
        "output": "3"
      },
      {
        "input": "[1,2,4,5]",
        "output": "-1"
      },
      {
        "input": "[1,4,2,5,6,7,8,9,10]",
        "output": "2"
      },
      {
        "input": "[4,8,5,7,3]",
        "output": "4"
      },
      {
        "input": "[]",
        "output": "-1"
      }
    ]
  },
  {
    "id": "problem-137",
    "title": "Problem 137",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[2, 4, 1, 3, 5, 7]",
        "output": "(None, 1)"
      },
      {
        "input": "[2, 4, 1, 3, 5, 7, 0]",
        "output": "(None, 1)"
      },
      {
        "input": "[1, 3, 2, 4, 5, 6, -2]",
        "output": "(-2, 1)"
      },
      {
        "input": "[4, 5, 3, 6, 2, 7, -7]",
        "output": "(-7, 2)"
      },
      {
        "input": "[7, 3, 8, 4, 9, 2, 5, -9]",
        "output": "(-9, 2)"
      },
      {
        "input": "[]",
        "output": "(None, None)"
      },
      {
        "input": "[0]",
        "output": "(None, None)"
      },
      {
        "input": "[-1, -3, -5, -6]",
        "output": "(-1, None)"
      },
      {
        "input": "[-1, -3, -5, -6, 0]",
        "output": "(-1, None)"
      },
      {
        "input": "[-6, -4, -4, -3, 1]",
        "output": "(-3, 1)"
      },
      {
        "input": "[-6, -4, -4, -3, -100, 1]",
        "output": "(-3, 1)"
      }
    ]
  },
  {
    "id": "problem-138",
    "title": "Problem 138",
    "short_description": "Create a function that takes integers, floats, or strings representing",
    "description": "Create a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn None if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "1, 2",
        "output": "2"
      },
      {
        "input": "1, 2.5",
        "output": "2.5"
      },
      {
        "input": "2, 3",
        "output": "3"
      },
      {
        "input": "5, 6",
        "output": "6"
      },
      {
        "input": "1, \"2,3\"",
        "output": "\"2,3\""
      },
      {
        "input": "\"5,1\", \"6\"",
        "output": "\"6\""
      },
      {
        "input": "\"1\", \"2\"",
        "output": "\"2\""
      },
      {
        "input": "\"1\", 1",
        "output": "None"
      }
    ]
  },
  {
    "id": "problem-139",
    "title": "Problem 139",
    "short_description": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers",
    "description": "Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "4",
        "output": "False"
      },
      {
        "input": "6",
        "output": "False"
      },
      {
        "input": "8",
        "output": "True"
      },
      {
        "input": "10",
        "output": "True"
      },
      {
        "input": "11",
        "output": "False"
      },
      {
        "input": "12",
        "output": "True"
      },
      {
        "input": "13",
        "output": "False"
      },
      {
        "input": "16",
        "output": "True"
      }
    ]
  },
  {
    "id": "problem-140",
    "title": "Problem 140",
    "short_description": "The Brazilian factorial is defined as:",
    "description": "The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "4",
        "output": "288, \"Test 4\""
      },
      {
        "input": "5",
        "output": "34560, \"Test 5\""
      },
      {
        "input": "7",
        "output": "125411328000, \"Test 7\""
      },
      {
        "input": "1",
        "output": "1, \"Test 1\""
      }
    ]
  },
  {
    "id": "problem-141",
    "title": "Problem 141",
    "short_description": "Given a string text, replace all spaces in it with underscores,",
    "description": "Given a string text, replace all spaces in it with underscores,\nand if a string has more than 2 consecutive spaces,\nthen replace all consecutive spaces with -\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"Example\"",
        "output": "\"Example\", \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "\"Mudasir Hanif \"",
        "output": "\"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\""
      },
      {
        "input": "\"Yellow Yellow  Dirty  Fellow\"",
        "output": "\"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\""
      },
      {
        "input": "\"Exa   mple\"",
        "output": "\"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\""
      },
      {
        "input": "\"   Exa 1 2 2 mple\"",
        "output": "\"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-142",
    "title": "Problem 142",
    "short_description": "Create a function which takes a string representing a file's name, and returns",
    "description": "Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions\nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from\nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: 'txt', 'exe', 'dll'\nExamples:\nfile_name_check(\"example.txt\") # => 'Yes'\nfile_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"example.txt\"",
        "output": "'Yes'"
      },
      {
        "input": "\"1example.dll\"",
        "output": "'No'"
      },
      {
        "input": "'s1sdf3.asd'",
        "output": "'No'"
      },
      {
        "input": "'K.dll'",
        "output": "'Yes'"
      },
      {
        "input": "'MY16FILE3.exe'",
        "output": "'Yes'"
      },
      {
        "input": "'His12FILE94.exe'",
        "output": "'No'"
      },
      {
        "input": "'_Y.txt'",
        "output": "'No'"
      },
      {
        "input": "'?aREYA.exe'",
        "output": "'No'"
      },
      {
        "input": "'/this_is_valid.dll'",
        "output": "'No'"
      },
      {
        "input": "'this_is_valid.wow'",
        "output": "'No'"
      },
      {
        "input": "'this_is_valid.txt'",
        "output": "'Yes'"
      },
      {
        "input": "'this_is_valid.txtexe'",
        "output": "'No'"
      },
      {
        "input": "'#this2_i4s_5valid.ten'",
        "output": "'No'"
      },
      {
        "input": "'@this1_is6_valid.exe'",
        "output": "'No'"
      },
      {
        "input": "'this_is_12valid.6exe4.txt'",
        "output": "'No'"
      },
      {
        "input": "'all.exe.txt'",
        "output": "'No'"
      },
      {
        "input": "'I563_No.exe'",
        "output": "'Yes'"
      },
      {
        "input": "'Is3youfault.txt'",
        "output": "'Yes'"
      },
      {
        "input": "'no_one#knows.dll'",
        "output": "'Yes'"
      },
      {
        "input": "'1I563_Yes3.exe'",
        "output": "'No'"
      },
      {
        "input": "'I563_Yes3.txtt'",
        "output": "'No'"
      },
      {
        "input": "'final..txt'",
        "output": "'No'"
      },
      {
        "input": "'final132'",
        "output": "'No'"
      },
      {
        "input": "'_f4indsartal132.'",
        "output": "'No'"
      },
      {
        "input": "'.txt'",
        "output": "'No'"
      },
      {
        "input": "'s.'",
        "output": "'No'"
      }
    ]
  },
  {
    "id": "problem-143",
    "title": "Problem 143",
    "short_description": "\"",
    "description": "\"\nThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a\nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not\nchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries.\nExamples:\nFor lst = 1,2,3 the output should be 6\nFor lst =   the output should be 0\nFor lst = -1,-5,2,-1,-5  the output should be -126",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[1,2,3]",
        "output": "6"
      },
      {
        "input": "[1,4,9]",
        "output": "14"
      },
      {
        "input": "[]",
        "output": "0"
      },
      {
        "input": "[1,1,1,1,1,1,1,1,1]",
        "output": "9"
      },
      {
        "input": "[-1,-1,-1,-1,-1,-1,-1,-1,-1]",
        "output": "-3"
      },
      {
        "input": "[0]",
        "output": "0"
      },
      {
        "input": "[-1,-5,2,-1,-5]",
        "output": "-126"
      },
      {
        "input": "[-56,-99,1,0,-2]",
        "output": "3030"
      },
      {
        "input": "[-1,0,0,0,0,0,0,0,-1]",
        "output": "0"
      },
      {
        "input": "[-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]",
        "output": "-14196"
      },
      {
        "input": "[-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]",
        "output": "-1448"
      }
    ]
  },
  {
    "id": "problem-144",
    "title": "Problem 144",
    "short_description": "You are given a string representing a sentence,",
    "description": "You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\nInput: sentence = \"This is a test\"\nOutput: \"is\"\nExample 2:\nInput: sentence = \"lets go for swimming\"\nOutput: \"go for\"\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains only letters",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"This is a test\"",
        "output": "\"is\""
      },
      {
        "input": "\"lets go for swimming\"",
        "output": "\"go for\""
      },
      {
        "input": "\"there is no place available here\"",
        "output": "\"there is no place\""
      },
      {
        "input": "\"Hi I am Hussein\"",
        "output": "\"Hi am Hussein\""
      },
      {
        "input": "\"go for it\"",
        "output": "\"go for it\""
      },
      {
        "input": "\"here\"",
        "output": "\"\""
      },
      {
        "input": "\"here is\"",
        "output": "\"is\""
      }
    ]
  },
  {
    "id": "problem-145",
    "title": "Problem 145",
    "short_description": "Your task is to implement a function that will simplify the expression",
    "description": "Your task is to implement a function that will simplify the expression\nx * n. The function returns True if x * n evaluates to a whole number and False\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"1/5\", \"5/1\"",
        "output": "True, 'test1'"
      },
      {
        "input": "\"1/6\", \"2/1\"",
        "output": "False, 'test2'"
      },
      {
        "input": "\"5/1\", \"3/1\"",
        "output": "True, 'test3'"
      },
      {
        "input": "\"7/10\", \"10/2\"",
        "output": "False, 'test4'"
      },
      {
        "input": "\"2/10\", \"50/10\"",
        "output": "True, 'test5'"
      },
      {
        "input": "\"7/2\", \"4/2\"",
        "output": "True, 'test6'"
      },
      {
        "input": "\"11/6\", \"6/1\"",
        "output": "True, 'test7'"
      },
      {
        "input": "\"2/3\", \"5/2\"",
        "output": "False, 'test8'"
      },
      {
        "input": "\"5/2\", \"3/5\"",
        "output": "False, 'test9'"
      },
      {
        "input": "\"2/4\", \"8/4\"",
        "output": "True, 'test10'"
      },
      {
        "input": "\"2/4\", \"4/2\"",
        "output": "True, 'test11'"
      },
      {
        "input": "\"1/5\", \"5/1\"",
        "output": "True, 'test12'"
      },
      {
        "input": "\"1/5\", \"1/5\"",
        "output": "False, 'test13'"
      }
    ]
  },
  {
    "id": "problem-146",
    "title": "Problem 146",
    "short_description": "Write a function which sorts the given list of integers",
    "description": "Write a function which sorts the given list of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original list.\nFor example:\n>>> order_by_points(1, 11, -1, -11, -12) == -1, -11, 1, -12, 11\n>>> order_by_points() ==",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[1, 11, -1, -11, -12]",
        "output": "[-1, -11, 1, -12, 11]"
      },
      {
        "input": "[1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]",
        "output": "[0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]"
      },
      {
        "input": "[]",
        "output": "[]"
      },
      {
        "input": "[1, -11, -32, 43, 54, -98, 2, -3]",
        "output": "[-3, -32, -98, -11, 1, 2, 43, 54]"
      },
      {
        "input": "[1,2,3,4,5,6,7,8,9,10,11]",
        "output": "[1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "input": "[0,6,6,-76,-21,23,4]",
        "output": "[-76, -21, 0, 4, 23, 6, 6]"
      }
    ]
  },
  {
    "id": "problem-147",
    "title": "Problem 147",
    "short_description": "Write a function that takes an array of numbers as input and returns",
    "description": "Write a function that takes an array of numbers as input and returns\nthe number of elements in the array that are greater than 10 and both\nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter(15, -73, 14, -15) => 1\nspecialFilter(33, -2, -3, 45, 21, 109) => 2",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[5, -2, 1, -5]",
        "output": "0"
      },
      {
        "input": "[15, -73, 14, -15]",
        "output": "1"
      },
      {
        "input": "[33, -2, -3, 45, 21, 109]",
        "output": "2"
      },
      {
        "input": "[43, -12, 93, 125, 121, 109]",
        "output": "4"
      },
      {
        "input": "[71, -2, -33, 75, 21, 19]",
        "output": "3"
      },
      {
        "input": "[1]",
        "output": "0"
      },
      {
        "input": "[]",
        "output": "0"
      }
    ]
  },
  {
    "id": "problem-148",
    "title": "Problem 148",
    "short_description": "You are given a positive integer n. You have to create an integer array a of length n.",
    "description": "You are given a positive integer n. You have to create an integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of ai = i * i - i + 1.\nReturn the number of triples (ai, aj, ak) of a where i < j < k,\nand ai + aj + ak is a multiple of 3.\nExample :\nInput: n = 5\nOutput: 1\nExplanation:\na = 1, 3, 7, 13, 21\nThe only valid triple is (1, 7, 13).",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "5",
        "output": "1"
      },
      {
        "input": "6",
        "output": "4"
      },
      {
        "input": "10",
        "output": "36"
      },
      {
        "input": "100",
        "output": "53361"
      }
    ]
  },
  {
    "id": "problem-149",
    "title": "Problem 149",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"Jupiter\", \"Neptune\"",
        "output": "(\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))"
      },
      {
        "input": "\"Earth\", \"Mercury\"",
        "output": "(\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))"
      },
      {
        "input": "\"Mercury\", \"Uranus\"",
        "output": "(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))"
      },
      {
        "input": "\"Neptune\", \"Venus\"",
        "output": "(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))"
      },
      {
        "input": "\"Earth\", \"Earth\"",
        "output": "()"
      },
      {
        "input": "\"Mars\", \"Earth\"",
        "output": "()"
      },
      {
        "input": "\"Jupiter\", \"Makemake\"",
        "output": "()"
      }
    ]
  },
  {
    "id": "problem-150",
    "title": "Problem 150",
    "short_description": "Write a function that accepts a list of strings as a parameter,",
    "description": "Write a function that accepts a list of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted list with a sorted order,\nThe list is always a list of strings and never an array of numbers,\nand it may contain duplicates.\nThe order of the list should be ascending by length of each word, and you\nshould return the list sorted by that rule.\nIf two words have the same length, sort the list alphabetically.\nThe function should return a list of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert list_sort(\"aa\", \"a\", \"aaa\") => \"aa\"\nassert list_sort(\"ab\", \"a\", \"aaa\", \"cd\") => \"ab\", \"cd\"",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[\"aa\", \"a\", \"aaa\"]",
        "output": "[\"aa\"]"
      },
      {
        "input": "[\"school\", \"AI\", \"asdf\", \"b\"]",
        "output": "[\"AI\", \"asdf\", \"school\"]"
      },
      {
        "input": "[\"d\", \"b\", \"c\", \"a\"]",
        "output": "[]"
      },
      {
        "input": "[\"d\", \"dcba\", \"abcd\", \"a\"]",
        "output": "[\"abcd\", \"dcba\"]"
      },
      {
        "input": "[\"AI\", \"ai\", \"au\"]",
        "output": "[\"AI\", \"ai\", \"au\"]"
      },
      {
        "input": "[\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]",
        "output": "[]"
      },
      {
        "input": "['aaaa', 'bbbb', 'dd', 'cc']",
        "output": "[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]"
      }
    ]
  },
  {
    "id": "problem-151",
    "title": "Problem 151",
    "short_description": "A simple program which should return the value of x if n is",
    "description": "A simple program which should return the value of x if n is\na prime number and should return the value of y otherwise.\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "7, 34, 12",
        "output": "34"
      },
      {
        "input": "15, 8, 5",
        "output": "5"
      },
      {
        "input": "3, 33, 5212",
        "output": "33"
      },
      {
        "input": "1259, 3, 52",
        "output": "3"
      },
      {
        "input": "7919, -1, 12",
        "output": "-1"
      },
      {
        "input": "3609, 1245, 583",
        "output": "583"
      },
      {
        "input": "91, 56, 129",
        "output": "129"
      },
      {
        "input": "6, 34, 1234",
        "output": "1234"
      },
      {
        "input": "1, 2, 0",
        "output": "0"
      },
      {
        "input": "2, 2, 0",
        "output": "2"
      }
    ]
  },
  {
    "id": "problem-152",
    "title": "Problem 152",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[]",
        "output": "0 , \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[5, 4]",
        "output": "25 , \"This prints if this assert fails 2 (good for debugging!)\""
      },
      {
        "input": "[0.1, 0.2, 0.3]",
        "output": "0 , \"This prints if this assert fails 3 (good for debugging!)\""
      },
      {
        "input": "[-10, -20, -30]",
        "output": "0 , \"This prints if this assert fails 4 (good for debugging!)\""
      },
      {
        "input": "[-1, -2, 8]",
        "output": "0, \"This prints if this assert fails 5 (also good for debugging!)\""
      },
      {
        "input": "[0.2, 3, 5]",
        "output": "34, \"This prints if this assert fails 6 (also good for debugging!)\""
      },
      {
        "input": "lst",
        "output": "odd_sum , \"This prints if this assert fails 7 (good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-153",
    "title": "Problem 153",
    "short_description": "I think we all remember that feeling when the result of some long-awaited",
    "description": "I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two arrays of scores and guesses of equal length, where each index shows a match.\nReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\ncompare(1,2,3,4,5,1,1,2,3,4,2,-2) -> 0,0,0,0,3,3\ncompare(0,5,0,0,0,4,4,1,1,0,0,-2) -> 4,4,1,0,0,6",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "[1,2,3,4,5,1],[1,2,3,4,2,-2]",
        "output": "[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[0,0,0,0,0,0],[0,0,0,0,0,0]",
        "output": "[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[1,2,3],[-1,-2,-3]",
        "output": "[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "[1,2,3,5],[-1,2,3,4]",
        "output": "[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-154",
    "title": "Problem 154",
    "short_description": "You will be given the name of a class (a string) and a list of extensions.",
    "description": "You will be given the name of a class (a string) and a list of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters\nin the extension's name, the strength is given by the fraction CAP - SM.\nYou should find the strongest extension and return a string in this\nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the list.\nFor example, if you are given \"Slices\" as the class and a list of the\nextensions: 'SErviNGSliCes', 'Cheese', 'StuFfed' then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n(its strength is -1).\nExample:\nfor Strongest_Extension('my_class', 'AA', 'Be', 'CC') == 'my_class.AA'",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "'Watashi', ['tEN', 'niNE', 'eIGHt8OKe']",
        "output": "'Watashi.eIGHt8OKe'"
      },
      {
        "input": "'Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']",
        "output": "'Boku123.YEs.WeCaNe'"
      },
      {
        "input": "'__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']",
        "output": "'__YESIMHERE.NuLl__'"
      },
      {
        "input": "'K', ['Ta', 'TAR', 't234An', 'cosSo']",
        "output": "'K.TAR'"
      },
      {
        "input": "'__HAHA', ['Tab', '123', '781345', '-_-']",
        "output": "'__HAHA.123'"
      },
      {
        "input": "'YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']",
        "output": "'YameRore.okIWILL123'"
      },
      {
        "input": "'finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']",
        "output": "'finNNalLLly.WoW'"
      },
      {
        "input": "'_', ['Bb', '91245']",
        "output": "'_.Bb'"
      },
      {
        "input": "'Sp', ['671235', 'Bb']",
        "output": "'Sp.671235'"
      }
    ]
  },
  {
    "id": "problem-155",
    "title": "Problem 155",
    "short_description": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word",
    "description": "You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True",
    "difficulty": "Hard",
    "tests": []
  },
  {
    "id": "problem-156",
    "title": "Problem 156",
    "short_description": "Given an integer. return a tuple that has the number of even and odd digits respectively.",
    "description": "Given an integer. return a tuple that has the number of even and odd digits respectively.\nExample:\neven_odd_count(-12) ==> (1, 1)\neven_odd_count(123) ==> (1, 2)",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "7",
        "output": "(0, 1)"
      },
      {
        "input": "-78",
        "output": "(1, 1)"
      },
      {
        "input": "3452",
        "output": "(2, 2)"
      },
      {
        "input": "346211",
        "output": "(3, 3)"
      },
      {
        "input": "-345821",
        "output": "(3, 3)"
      },
      {
        "input": "-2",
        "output": "(1, 0)"
      },
      {
        "input": "-45347",
        "output": "(2, 3)"
      },
      {
        "input": "0",
        "output": "(1, 0)"
      }
    ]
  },
  {
    "id": "problem-157",
    "title": "Problem 157",
    "short_description": "Given a positive integer, obtain its roman numeral equivalent as a string,",
    "description": "Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19) == 'xix'\n>>> int_to_mini_roman(152) == 'clii'\n>>> int_to_mini_roman(426) == 'cdxxvi'",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "19",
        "output": "'xix'"
      },
      {
        "input": "152",
        "output": "'clii'"
      },
      {
        "input": "251",
        "output": "'ccli'"
      },
      {
        "input": "426",
        "output": "'cdxxvi'"
      },
      {
        "input": "500",
        "output": "'d'"
      },
      {
        "input": "1",
        "output": "'i'"
      },
      {
        "input": "4",
        "output": "'iv'"
      },
      {
        "input": "43",
        "output": "'xliii'"
      },
      {
        "input": "90",
        "output": "'xc'"
      },
      {
        "input": "94",
        "output": "'xciv'"
      },
      {
        "input": "532",
        "output": "'dxxxii'"
      },
      {
        "input": "900",
        "output": "'cm'"
      },
      {
        "input": "994",
        "output": "'cmxciv'"
      },
      {
        "input": "1000",
        "output": "'m'"
      }
    ]
  },
  {
    "id": "problem-158",
    "title": "Problem 158",
    "short_description": "Solve the problem below.",
    "description": "No description provided.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "3, 4, 5",
        "output": "True, \"This prints if this assert fails 1 (good for debugging!)\""
      },
      {
        "input": "1, 2, 3",
        "output": "False"
      },
      {
        "input": "10, 6, 8",
        "output": "True"
      },
      {
        "input": "2, 2, 2",
        "output": "False"
      },
      {
        "input": "7, 24, 25",
        "output": "True"
      },
      {
        "input": "10, 5, 7",
        "output": "False"
      },
      {
        "input": "5, 12, 13",
        "output": "True"
      },
      {
        "input": "15, 8, 17",
        "output": "True"
      },
      {
        "input": "48, 55, 73",
        "output": "True"
      },
      {
        "input": "1, 1, 1",
        "output": "False, \"This prints if this assert fails 2 (also good for debugging!)\""
      },
      {
        "input": "2, 2, 10",
        "output": "False"
      }
    ]
  },
  {
    "id": "problem-159",
    "title": "Problem 159",
    "short_description": "Write a function that accepts a list of strings.",
    "description": "Write a function that accepts a list of strings.\nThe list contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\nfind_max(\"name\", \"of\", \"string\") == \"string\"\nfind_max(\"name\", \"enam\", \"game\") == \"enam\"\nfind_max(\"aaaaaaa\", \"bb\" ,\"cc\") == \"\"aaaaaaa\"",
    "difficulty": "Hard",
    "tests": []
  },
  {
    "id": "problem-160",
    "title": "Problem 160",
    "short_description": "You're a hungry rabbit, and you already have eaten a certain number of carrots,",
    "description": "You're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return an array of  total number of eaten carrots after your meals,\nthe number of carrots left after your meals\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n* eat(5, 6, 10) -> 11, 4\n* eat(4, 8, 9) -> 12, 1\n* eat(1, 10, 10) -> 11, 0\n* eat(2, 11, 5) -> 7, 0\nVariables:\n@number : integer\nthe number of carrots that you have eaten.\n@need : integer\nthe number of carrots that you need to eat.\n@remaining : integer\nthe number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "5, 6, 10",
        "output": "[11, 4], \"Error\""
      },
      {
        "input": "4, 8, 9",
        "output": "[12, 1], \"Error\""
      },
      {
        "input": "1, 10, 10",
        "output": "[11, 0], \"Error\""
      },
      {
        "input": "2, 11, 5",
        "output": "[7, 0], \"Error\""
      },
      {
        "input": "4, 5, 7",
        "output": "[9, 2], \"Error\""
      },
      {
        "input": "4, 5, 1",
        "output": "[5, 0], \"Error\""
      }
    ]
  },
  {
    "id": "problem-161",
    "title": "Problem 161",
    "short_description": "Given two lists operator, and operand. The first list has basic algebra operations, and",
    "description": "Given two lists operator, and operand. The first list has basic algebra operations, and\nthe second list is a list of integers. Use the two given lists to build the algebric\nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + )\nSubtraction ( - )\nMultiplication ( * )\nFloor division ( // )\nExponentiation ( ** )\nExample:\noperator'+', '*', '-'\narray = 2, 3, 4, 5\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\nThe length of operator list is equal to the length of operand list minus one.\nOperand is a list of of non-negative integers.\nOperator list has at least one operator, and operand list has at least two operands.",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "['**', '*', '+'], [2, 3, 4, 5]",
        "output": "37"
      },
      {
        "input": "['+', '*', '-'], [2, 3, 4, 5]",
        "output": "9"
      },
      {
        "input": "['//', '*'], [7, 3, 4]",
        "output": "8, \"This prints if this assert fails 1 (good for debugging!)\""
      }
    ]
  },
  {
    "id": "problem-162",
    "title": "Problem 162",
    "short_description": "You are given a string s.",
    "description": "You are given a string s.\nif si is a letter, reverse its case from lower to upper or vise versa,\notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "\"AsDf\"",
        "output": "\"aSdF\""
      },
      {
        "input": "\"1234\"",
        "output": "\"4321\""
      },
      {
        "input": "\"ab\"",
        "output": "\"AB\""
      },
      {
        "input": "\"#a@C\"",
        "output": "\"#A@c\""
      },
      {
        "input": "\"#AsdfW^45\"",
        "output": "\"#aSDFw^45\""
      },
      {
        "input": "\"#6@2\"",
        "output": "\"2@6#\""
      },
      {
        "input": "\"#$a^D\"",
        "output": "\"#$A^d\""
      },
      {
        "input": "\"#ccc\"",
        "output": "\"#CCC\""
      }
    ]
  },
  {
    "id": "problem-163",
    "title": "Problem 163",
    "short_description": "Given a string 'text', return its md5 hash equivalent string.",
    "description": "Given a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return None.\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "'Hello world'",
        "output": "'3e25960a79dbc69b674cd4ec67a72c62'"
      },
      {
        "input": "''",
        "output": "None"
      },
      {
        "input": "'A B C'",
        "output": "'0ef78513b0cb8cef12743f5aeb35f888'"
      },
      {
        "input": "'password'",
        "output": "'5f4dcc3b5aa765d61d8327deb882cf99'"
      }
    ]
  },
  {
    "id": "problem-164",
    "title": "Problem 164",
    "short_description": "Given two positive integers a and b, return the even digits between a",
    "description": "Given two positive integers a and b, return the even digits between a\nand b, in ascending order.\nFor example:\ngenerate_integers(2, 8) => 2, 4, 6, 8\ngenerate_integers(8, 2) => 2, 4, 6, 8\ngenerate_integers(10, 14) =>",
    "difficulty": "Hard",
    "tests": [
      {
        "input": "2, 10",
        "output": "[2, 4, 6, 8], \"Test 1\""
      },
      {
        "input": "10, 2",
        "output": "[2, 4, 6, 8], \"Test 2\""
      },
      {
        "input": "132, 2",
        "output": "[2, 4, 6, 8], \"Test 3\""
      },
      {
        "input": "17,89",
        "output": "[], \"Test 4\""
      }
    ]
  }
]