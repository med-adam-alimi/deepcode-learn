 [

  {
    "id": "python-1",
    "title": "Extract Decimal Part",
    "short_description": "Return the decimal part of a float.",
    "description": "Given a positive floating point number, return only the decimal part.\n>>> decimal_part(3.5)\n0.5",
    "difficulty": "Easy",
    "tests": [
      {"input": "3.5", "output": "0.5"},
      {"input": "10.1", "output": "0.1"},
      {"input": "0.99", "output": "0.99"},
      {"input": "5.0", "output": "0.0"},
      {"input": "7.75", "output": "0.75"},
      {"input": "2.3", "output": "0.3"},
      {"input": "4.999", "output": "0.999"},
      {"input": "100.123", "output": "0.123"},
      {"input": "1.001", "output": "0.001"},
      {"input": "123.456", "output": "0.456"},
      {"input": "0.0", "output": "0.0"},
      {"input": "999.999", "output": "0.999"},
      {"input": "42.42", "output": "0.42"},
      {"input": "0.123456", "output": "0.123456"},
      {"input": "50.505", "output": "0.505"}
    ]
  },
  
  {
    "id": "python-2",
    "title": "Reverse String",
    "short_description": "Reverse the given string.",
    "description": "Write a function that returns the reversed version of the given string.\n>>> reverse_string('hello')\n'olleh'",
    "difficulty": "Easy",
    "tests": [
      {"input": "'hello'", "output": "'olleh'"},
      {"input": "'python'", "output": "'nohtyp'"},
      {"input": "''", "output": "''"},
      {"input": "'a'", "output": "'a'"},
      {"input": "'racecar'", "output": "'racecar'"},
      {"input": "'12345'", "output": "'54321'"},
      {"input": "'A man'", "output": "'nam A'"},
      {"input": "'   '", "output": "'   '"},
      {"input": "'Hello World'", "output": "'dlroW olleH'"},
      {"input": "'!@#$$#@!'", "output": "'!@#$$#@!'"},
      {"input": "'Wow!'", "output": "'!woW'"},
      {"input": "'Palindrome'", "output": "'emordnilaP'"},
      {"input": "'Data123'", "output": "'321ataD'"},
      {"input": "'  abc  '", "output": "'  cba  '"},
      {"input": "'ðŸ™‚ðŸ™ƒ'", "output": "'ðŸ™ƒðŸ™‚'"}
    ]
  },
  
  {
    "id": "python-3",
    "title": "Sum of Digits",
    "short_description": "Return the sum of all digits in the integer.",
    "description": "Given a non-negative integer, return the sum of its digits.\n>>> sum_digits(1234)\n10",
    "difficulty": "Easy",
    "tests": [
      {"input": "1234", "output": "10"},
      {"input": "0", "output": "0"},
      {"input": "9999", "output": "36"},
      {"input": "1001", "output": "2"},
      {"input": "5678", "output": "26"},
      {"input": "1", "output": "1"},
      {"input": "2020", "output": "4"},
      {"input": "321", "output": "6"},
      {"input": "555", "output": "15"},
      {"input": "101", "output": "2"}
    ]
  },
  
  {
    "id": "python-4",
    "title": "Is Palindrome",
    "short_description": "Check if the input string is a palindrome.",
    "description": "Return True if the given string is a palindrome (reads the same forward and backward).\n>>> is_palindrome(\"madam\")\nTrue",
    "difficulty": "Easy",
    "tests": [
      {"input": "\"madam\"", "output": "True"},
      {"input": "\"racecar\"", "output": "True"},
      {"input": "\"python\"", "output": "False"},
      {"input": "\"\"", "output": "True"},
      {"input": "\"a\"", "output": "True"},
      {"input": "\"level\"", "output": "True"},
      {"input": "\"radar\"", "output": "True"},
      {"input": "\"step on no pets\"", "output": "False"},
      {"input": "\"noon\"", "output": "True"},
      {"input": "\"hello\"", "output": "False"}
    ]
  },
  
  {
    "id": "python-5",
    "title": "Even or Odd",
    "short_description": "Return 'Even' if number is even, otherwise 'Odd'.",
    "description": "Given an integer, return the string \"Even\" if it's even, otherwise return \"Odd\".\n>>> even_or_odd(4)\n\"Even\"",
    "difficulty": "Easy",
    "tests": [
      {"input": "4", "output": "\"Even\""},
      {"input": "7", "output": "\"Odd\""},
      {"input": "0", "output": "\"Even\""},
      {"input": "-1", "output": "\"Odd\""},
      {"input": "-2", "output": "\"Even\""},
      {"input": "999", "output": "\"Odd\""},
      {"input": "1000", "output": "\"Even\""},
      {"input": "11", "output": "\"Odd\""},
      {"input": "22", "output": "\"Even\""},
      {"input": "101", "output": "\"Odd\""}
    ]
  },
  
  {
    "id": "python-6",
    "title": "String Reversal",
    "short_description": "Return the reversed version of the input string.",
    "description": "Write a function that takes a string and returns its reverse.\n>>> reverse_string(\"hello\")\n\"olleh\"",
    "difficulty": "Easy",
    "tests": [
      {"input": "\"hello\"", "output": "\"olleh\""},
      {"input": "\"racecar\"", "output": "\"racecar\""},
      {"input": "\"Python\"", "output": "\"nohtyP\""},
      {"input": "\"\"", "output": "\"\""},
      {"input": "\"a\"", "output": "\"a\""},
      {"input": "\"123\"", "output": "\"321\""},
      {"input": "\"madam\"", "output": "\"madam\""},
      {"input": "\"loop\"", "output": "\"pool\""},
      {"input": "\"@!$\"", "output": "\"$!@\""},
      {"input": "\"Test\"", "output": "\"tseT\""}
    ]
  },
  
  {
    "id": "python-7",
    "title": "List Average",
    "short_description": "Return the average of the list of numbers.",
    "description": "Given a list of integers or floats, return the average (mean) of the numbers.\n>>> average([1, 2, 3])\n2.0",
    "difficulty": "Easy",
    "tests": [
      {"input": "[1, 2, 3]", "output": "2.0"},
      {"input": "[10, 10, 10, 10]", "output": "10.0"},
      {"input": "[0]", "output": "0.0"},
      {"input": "[5]", "output": "5.0"},
      {"input": "[1, 2, 3, 4, 5]", "output": "3.0"},
      {"input": "[2.5, 2.5]", "output": "2.5"},
      {"input": "[100, 200, 300]", "output": "200.0"},
      {"input": "[1, -1]", "output": "0.0"},
      {"input": "[-5, -10, -15]", "output": "-10.0"},
      {"input": "[0, 0, 0]", "output": "0.0"}
    ]
  },
  
  {
    "id": "python-8",
    "title": "Count Vowels",
    "short_description": "Count number of vowels in a given string.",
    "description": "Given a lowercase string, return the number of vowels (a, e, i, o, u).\n>>> count_vowels(\"hello\")\n2",
    "difficulty": "Easy",
    "tests": [
      {"input": "\"hello\"", "output": "2"},
      {"input": "\"aeiou\"", "output": "5"},
      {"input": "\"bcdfg\"", "output": "0"},
      {"input": "\"Python\"", "output": "1"},
      {"input": "\"\"", "output": "0"},
      {"input": "\"rhythm\"", "output": "0"},
      {"input": "\"education\"", "output": "5"},
      {"input": "\"queue\"", "output": "4"},
      {"input": "\"apple\"", "output": "2"},
      {"input": "\"banana\"", "output": "3"}
    ]
  },
  
  {
    "id": "python-9",
    "title": "Is Prime",
    "short_description": "Check if the given number is a prime number.",
    "description": "Return True if the given integer is a prime number (greater than 1 and divisible only by 1 and itself).\n>>> is_prime(5)\nTrue",
    "difficulty": "Easy",
    "tests": [
      {"input": "2", "output": "True"},
      {"input": "3", "output": "True"},
      {"input": "4", "output": "False"},
      {"input": "5", "output": "True"},
      {"input": "1", "output": "False"},
      {"input": "0", "output": "False"},
      {"input": "13", "output": "True"},
      {"input": "17", "output": "True"},
      {"input": "20", "output": "False"},
      {"input": "97", "output": "True"}
    ]
  },

  {
    "id": "python-10",
    "title": "Square Elements",
    "short_description": "Return a list where each element is squared.",
    "description": "Write a function that takes a list of integers and returns a new list with each value squared.\n>>> square_elements([1, 2, 3])\n[1, 4, 9]",
    "difficulty": "Easy",
    "tests": [
      {"input": "[1, 2, 3]", "output": "[1, 4, 9]"},
      {"input": "[0, -1, 2]", "output": "[0, 1, 4]"},
      {"input": "[]", "output": "[]"},
      {"input": "[4]", "output": "[16]"},
      {"input": "[-3, 5]", "output": "[9, 25]"},
      {"input": "[10, 20]", "output": "[100, 400]"},
      {"input": "[100]", "output": "[10000]"},
      {"input": "[3, 3, 3]", "output": "[9, 9, 9]"},
      {"input": "[-2, -4]", "output": "[4, 16]"},
      {"input": "[7, 8, 9]", "output": "[49, 64, 81]"}
    ]
  },
  
  {
    "id": "python-11",
    "title": "List Sum",
    "short_description": "Return the sum of all elements in a list.",
    "description": "Write a function that takes a list of integers and returns the sum of all its elements.\n>>> sum_list([1, 2, 3])\n6",
    "difficulty": "Easy",
    "tests": [
      {"input": "[1, 2, 3]", "output": "6"},
      {"input": "[0, 0, 0]", "output": "0"},
      {"input": "[-1, -2, -3]", "output": "-6"},
      {"input": "[]", "output": "0"},
      {"input": "[10, -5, 15]", "output": "20"}
    ]
  },

  {
    "id": "python-12",
    "title": "Is Prime",
    "short_description": "Check if a number is a prime.",
    "description": "Write a function that returns True if the given integer is a prime number, otherwise False.\n>>> is_prime(5)\nTrue",
    "difficulty": "Easy",
    "tests": [
      {"input": "5", "output": "True"},
      {"input": "4", "output": "False"},
      {"input": "1", "output": "False"},
      {"input": "2", "output": "True"},
      {"input": "29", "output": "True"},
      {"input": "100", "output": "False"},
      {"input": "97", "output": "True"},
      {"input": "0", "output": "False"},
      {"input": "-7", "output": "False"},
      {"input": "99991", "output": "True"}
    ]
  },
  
  {
    "id": "python-13",
    "title": "Count Vowels",
    "short_description": "Count the number of vowels in a string.",
    "description": "Write a function that returns the number of vowels (a, e, i, o, u) in a given string.\n>>> count_vowels(\"hello\")\n2",
    "difficulty": "Easy",
    "tests": [
      {"input": "\"hello\"", "output": "2"},
      {"input": "\"HELLO\"", "output": "2"},
      {"input": "\"why\"", "output": "0"},
      {"input": "\"aeiou\"", "output": "5"},
      {"input": "\"\"", "output": "0"},
      {"input": "\"Python\"", "output": "1"},
      {"input": "\"Vowels are easy\"", "output": "6"}
    ]
  },
  
  {
    "id": "python-14",
    "title": "Remove Duplicates",
    "short_description": "Remove duplicates from a list.",
    "description": "Given a list of integers, return a new list that has the same elements but without duplicates (original order preserved).\n>>> remove_duplicates([1, 2, 2, 3])\n[1, 2, 3]",
    "difficulty": "Easy",
    "tests": [
      {"input": "[1, 2, 2, 3]", "output": "[1, 2, 3]"},
      {"input": "[1, 1, 1, 1]", "output": "[1]"},
      {"input": "[]", "output": "[]"},
      {"input": "[5, 3, 5, 2, 2]", "output": "[5, 3, 2]"},
      {"input": "[0, 1, 0, 2]", "output": "[0, 1, 2]"}
    ]
  },
  
  {
    "id": "python-15",
    "title": "Factorial",
    "short_description": "Return the factorial of a number.",
    "description": "Write a function that returns the factorial of a non-negative integer. Assume input is always valid.\n>>> factorial(5)\n120",
    "difficulty": "Easy",
    "tests": [
      {"input": "5", "output": "120"},
      {"input": "0", "output": "1"},
      {"input": "1", "output": "1"},
      {"input": "3", "output": "6"},
      {"input": "10", "output": "3628800"}
    ]
  },

  {
    "id": "python-16",
    "title": "Longest Palindrome Substring",
    "short_description": "Find the longest palindromic substring.",
    "description": "Given a string, return the longest substring that is a palindrome.\n>>> longest_palindrome(\"babad\")\n\"bab\"",
    "difficulty": "Medium",
    "tests": [
      {"input": "\"babad\"", "output": "\"bab\""},
      {"input": "\"cbbd\"", "output": "\"bb\""},
      {"input": "\"a\"", "output": "\"a\""},
      {"input": "\"forgeeksskeegfor\"", "output": "\"geeksskeeg\""},
      {"input": "\"abacdfgdcaba\"", "output": "\"aba\""}
    ]
  },
  {
    "id": "python-17",
    "title": "Balanced Brackets",
    "short_description": "Check if brackets are balanced.",
    "description": "Write a function that takes a string of brackets and checks whether the brackets are balanced.\n>>> is_balanced(\"({[]})\")\nTrue",
    "difficulty": "Medium",
    "tests": [
      {"input": "\"({[]})\"", "output": "True"},
      {"input": "\"{[}]\"", "output": "False"},
      {"input": "\"\"", "output": "True"},
      {"input": "\"(((((((((())))))))))\"", "output": "True"},
      {"input": "\"([)]\"", "output": "False"}
    ]
  },
 
  {
    "id": "python-18",
    "title": "Flatten Nested List",
    "short_description": "Flatten a nested list into a single list.",
    "description": "Given a list of lists (which may contain other nested lists), return a flattened version of the list.\n>>> flatten([[1, 2], [3, [4, 5]]])\n[1, 2, 3, 4, 5]",
    "difficulty": "Medium",
    "tests": [
      {"input": "[[1, 2], [3, [4, 5]]]", "output": "[1, 2, 3, 4, 5]"},
      {"input": "[[[]]]", "output": "[]"},
      {"input": "[1, [2], [[3]]]", "output": "[1, 2, 3]"},
      {"input": "[[1], [], [2, [3, [4]]]]", "output": "[1, 2, 3, 4]"}
    ]
  },
  {
    "id": "python-19",
    "title": "Next Greater Element",
    "short_description": "Find the next greater element for each element in a list.",
    "description": "Write a function that, for each element in a list, finds the next greater element to the right. If none, put -1.\n>>> next_greater([2, 1, 2, 4, 3])\n[4, 2, 4, -1, -1]",
    "difficulty": "Medium",
    "tests": [
      {"input": "[2, 1, 2, 4, 3]", "output": "[4, 2, 4, -1, -1]"},
      {"input": "[1, 3, 2, 4]", "output": "[3, 4, 4, -1]"},
      {"input": "[5, 4, 3, 2, 1]", "output": "[-1, -1, -1, -1, -1]"},
      {"input": "[1, 2, 3, 4, 5]", "output": "[2, 3, 4, 5, -1]"}
    ]
  },
  
  {
    "id": "python-20",
    "title": "Expression Evaluator",
    "short_description": "Evaluate a basic math expression as a string.",
    "description": "Write a function to evaluate a simple arithmetic expression given as a string. Only integers, +, -, *, / (no parentheses). Use integer division for '/'.\n>>> eval_expr(\"3+5*2\")\n13",
    "difficulty": "Hard",
    "tests": [
      {"input": "\"3+5*2\"", "output": "13"},
      {"input": "\"10-2*3\"", "output": "4"},
      {"input": "\"100/2+3\"", "output": "53"},
      {"input": "\"4*3/2\"", "output": "6"},
      {"input": "\"1+2+3+4\"", "output": "10"},
      {"input": "\"20/2-3\"", "output": "7"}
    ]
  }
]


  